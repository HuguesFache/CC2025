/*
//	File:	PMUActionComponent.cpp
//
//	Date:	14-Apr-2003
//
//	ADOBE SYSTEMS INCORPORATED
//	Copyright 2003 Trias Developpement. All rights reserved.
//	
//	NOTICE: Adobe permits you to use, modify, and distribute this file in
//	accordance with the terms of the Adobe license agreement accompanying it.
//	If you have received this file from a source other than Adobe, then your
//	use, modification, or distribution of it requires the prior written
//	permission of Adobe.
//
*/

#include "VCPlugInHeaders.h"


// General includes:
#include "CActionComponent.h"
#include "CAlert.h"

// Interfaces includes
#include "IDialog.h"

// Project includes:
#include "PMUID.h"
#include "PMUUtils.h"


/** PMUActionComponent
	implements the actions that are executed when the plug-in's
	menu items are selected.

	PMUActionComponent implements IActionComponent based on
	the partial implementation CActionComponent.


	@author Trias
*/
class PMUActionComponent : public CActionComponent
{
	public:
		/**
			Constructor.
			@param boss interface ptr from boss object on which this interface is aggregated.
		*/
		PMUActionComponent(IPMUnknown* boss);

		/**
			The action component should do the requested action.
			This is where the menu item's action is taken.
			When a menu item is selected, the Menu Manager determines
			which plug-in is responsible for it, and calls its DoAction
			with the ID for the menu item chosen.

			@param actionID identifies the menu item that was selected.
			*/
		virtual void DoAction(IActiveContext* ac, ActionID actionID, GSysPoint mousePoint, IPMUnknown* widget);
	

	private:
		/** Encapsulates functionality for the about menu item. */
		void DoAbout();
};

/* CREATE_PMINTERFACE
 Binds the C++ implementation class onto its
 ImplementationID making the C++ code callable by the
 application.
*/
CREATE_PMINTERFACE(PMUActionComponent, kPMUActionComponentImpl)

/* PMUActionComponent Constructor
*/
PMUActionComponent::PMUActionComponent(IPMUnknown* boss)
				   : CActionComponent(boss){}

/* DoAction
*/

void PMUActionComponent::DoAction(IActiveContext* ac, ActionID actionID, GSysPoint mousePoint, IPMUnknown* widget)
{
	switch (actionID.Get())
	{
		case kPMUPopupAboutThisActionID:
		case kPMUAboutActionID:
		{
			this->DoAbout();
			break;
		}

		case kPMUExecTCLActionID:
		{
			PMUUtils::ExecTCL();		
			break;
		}
		
		case kPMUReverseTCLActionID:
		{
			PMUUtils::ReverseTCL();
			break;
		}

		case kPMUExportPermRefsTCLActionID:
		{
			PMUUtils::ExportPermRefsWithContent();
			break;
		}

		case kPMUTCLPrefsActionID:
		{
			PMUUtils::ShowTCLPrefs();
			break;
		}

		case kPMUAddReferenceTCLActionID:
		{
			PMUUtils::AddPermRef();
			break;
		}

		case kPMUDeleteAllPermRefsTCLActionID:
		{
			PMUUtils::DeleteAllPermsRefsTCL();
			break;
		}

#ifdef AUTO_TAGGING

		case kPMUAutoTagDocumentWithPriceTCLActionID:
		{
			PMUUtils::AutoTagDocumentPermsRefsTCL();
			break;
		}

		case kPMUAutoTagDocumentWithReferenceTCLActionID:
		{
			PMUUtils::AutoTagDocumentWithReferencePermsRefsTCL();
			break;
		}

#endif

#if ILC
		case kPMUCreateILCRefsActionID:
		{
			PMUUtils::ILC_AutoTagDocumentWithReferencePermsRefsTCL();
			break;
		}
			
		case kPMUExportILCRefsActionID:
		{
			PMUUtils::ILC_ExportPermRefs();
			break;
		}
#endif

		default:
		{
			break;
		}
	}
}

/* DoAbout
*/
void PMUActionComponent::DoAbout()
{

#if COMPOSER
	IDialog * dialog = PMUUtils::CreateNewDialog(kComposerAboutDialogResourceID);
	if(dialog != nil)
		dialog->Open();
#else
	CAlert::ModalAlert
	(
		kPMUAboutBoxStringKey,				// Alert string
		kOKString, 						// OK button
		kNullString, 						// No second button
		kNullString, 						// No third button
		1,							// Set OK button to default
		CAlert::eInformationIcon				// Information icon.
	);
#endif
}

//  Generated by Dolly build 17: template "IfPanelMenu".
// End, PMUActionComponent.cpp.




