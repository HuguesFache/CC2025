//========================================================================================
//  
//  $File: $
//  
//  Owner: Trias
//  
//  $Author: $
//  
//  $DateTime: $
//  
//  $Revision: $
//  
//  $Change: $
//  
//  Copyright Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//========================================================================================

#include "XPGID.h"
#include "XPGUIID.h"

#ifdef __ODFRC__

/*  Plugin version definition.
*/
resource PluginVersion (kSDKDefPluginVersionResourceID)
{
	kTargetVersion,
	kXPGUIPluginID, 
	kSDKDefPlugInMajorVersionNumber, kSDKDefPlugInMinorVersionNumber,
	kSDKDefHostMajorVersionNumber, kSDKDefHostMinorVersionNumber,
	kXPGUICurrentMajorFormatNumber, kXPGUICurrentMinorFormatNumber,
	{ kInDesignProduct},
	{ kWildFS },
	kUIPlugIn,
	kXPGUIVersion
};

/*
// This is where we define we require the library plug-ins:
*/
resource PluginDependency(kSDKDefPluginDependencyResourceID)
{
	kWildFS
	{
		kXPGPluginID,kXPGPluginName,kSDKDefPlugInMajorVersionNumber,kSDKDefPlugInMinorVersionNumber,		
	}
}

/*  The ExtraPluginInfo resource adds extra information to the Missing Plug-in dialog
	that is popped when a document containing this plug-in's data is opened when
	this plug-in is not present. These strings are not translatable strings
	since they must be available when the plug-in isn't around. They get stored
	in any document that this plug-in contributes data to.
*/
resource ExtraPluginInfo(1)
{
	kXPGUICompanyValue,			// Company name
	kXPGUIMissingPluginURLValue,	// URL 
	kXPGUIMissingPluginAlertValue,	// Missing plug-in alert text
};

resource IgnoreTags(1)
{ 
	kImplementationIDSpace
	{ 			
			kXPGUIDisplayImageFormePanelViewImpl,	       
			kXPGUIDisplayImagePanelViewImpl,
			kXPGUITextesPanelViewImpl,		
	} 
}; 

resource IgnoreTags(2)
{  	
	kClassIDSpace
	{
		kXPGUIResaRedacAdornmentBoss,
	}
}; 

resource ImplementationAlias(1) 
{ 
	{ 
		kXPGUIRubriqueIdDataImpl,	         kStringDataImpl,
		kXPGUIClasseurNameDataImpl,          kStringDataImpl,
		kXPGUITextFrameListImpl,	         kUIDListDataImpl,
		kXPGUIFormeStylesListImpl,	         kUIDListDataImpl,
		kXPGUIPhotoListImpl,		         kUIDListDataImpl,
		kXPGUICreditListImpl,		         kUIDListDataImpl,
		kXPGUILegendListImpl,			     kUIDListDataImpl,
		kXPGUICreditPhotoImpl,			     kStringDataImpl,
		kXPGUILegendPhotoImpl,			     kStringDataImpl,
		kXPGUIFormeItemListImpl,		     kUIDListDataImpl,
		kXPGUIFormeMatchingStylesListImpl,   kXPGKeyValueDataImpl,
		kXPGUIFormeNameDataImpl,		     kStringDataImpl,		
		kXPGUIArticleIdImpl,		 	     kStringDataImpl,	
		kXPGUIArticleTopicDataImpl,          kStringDataImpl,	
		kXPGUIArticleSnippetDataImpl,		 kStringDataImpl,		
		kXPGUIArticleIdStatusDataImpl,		 kStringDataImpl,
		kXPGUIArticleLibelleStatusDataImpl,	 kStringDataImpl,
		kXPGUIArticleCouleurStatusDataImpl,	 kStringDataImpl,
		kXPGUIArticleXMLDataImpl,			 kStringDataImpl,
		kXPGUIArticleRubDataImpl,			 kStringDataImpl,
		kXPGUIArticleSubRubDataImpl,		 kStringDataImpl,		
		kXPGUIArticleTypeDataImpl,           kIntDataImpl,
        kXPGUIFixedContentFrameListImpl,     kUIDListDataImpl,
	} 
}; 


/* Boss class definition.
*/
resource ClassDescriptionTable(kSDKDefClassDescriptionTableResourceID)
{{{

	/**
	 This boss class supports two interfaces:
	 IActionComponent and IPMPersist.
	 
	 @ingroup xpageui
	*/
	Class
	{
		kXPGUIActionComponentBoss,
		kInvalidClass,
		{
			/** Handle the actions from the menu. */
			IID_IACTIONCOMPONENT, kXPGUIActionComponentImpl,			
			
			/** Persist the state of the menu across application instantiation.
			Implementation provided by the API.*/
			IID_IPMPERSIST, kPMPersistImpl
		}
	},
	

	Class
	{
		kXPGUIImagesPanelWidgetBoss,
		kPalettePanelWidgetBoss,
		{
			/** The plug-in's implementation of ITextControlData with an exotic IID of IID_IPANELMENUDATA.
			Implementation provided by the API.
			*/
			IID_IPANELMENUDATA, kCPanelMenuDataImpl,
			
			/**
				Allows varying level of detail exposed by a widget.
			*/
			IID_IPANELDETAILCONTROLLER, kSizePanelDetailControllerImpl,
			
			IID_IOBSERVER, kXPGUIImagesPanelObserverImpl,
			
			IID_ICONTROLVIEW, kXPGUITextesPanelViewImpl, // Reuse of textes panel control view implementation
		}
	},
		
	Class
	{
		kXPGUIFormesPanelWidgetBoss,
		kPalettePanelWidgetBoss,
		{
			/** The plug-in's implementation of ITextControlData with an exotic IID of IID_IPANELMENUDATA.
			Implementation provided by the API.
			*/
			IID_IPANELMENUDATA, kCPanelMenuDataImpl,
			
			/**
				Allows varying level of detail exposed by a widget.
			*/
			IID_IPANELDETAILCONTROLLER, kSizePanelDetailControllerImpl,
			
			IID_IOBSERVER, kXPGUIFormesPanelObserverImpl,
			
			IID_ICONTROLVIEW, kXPGUITextesPanelViewImpl,
		}
	},	
	Class
	{
		kXPGUIXRailImagesPanelWidgetBoss,
		kPalettePanelWidgetBoss,
		{				
			/**
				Allows varying level of detail exposed by a widget.
			*/
			IID_IPANELDETAILCONTROLLER, kSizePanelDetailControllerImpl,
			
			IID_IOBSERVER, kXPGUIXRailImagesPanelObserverImpl,
			
			IID_ICONTROLVIEW, kXPGUITextesPanelViewImpl, // Reuse of textes panel control view implementation
		}
	},	
	Class
	{
		kXPGUIStatisticsPanelWidgetBoss,
		kPalettePanelWidgetBoss,
		{				
			/**
				Allows varying level of detail exposed by a widget.
			*/
			IID_IPANELDETAILCONTROLLER, kSizePanelDetailControllerImpl,
			
			IID_IOBSERVER, kXPGUIStatisticsPanelObserverImpl,
		}
	},
	

	Class
	{	
		kXPGUIStyleMatchingWidgetBoss,
		kTreeViewWidgetBoss,
		{			
			IID_ITREEVIEWWIDGETMGR,			kXPGUIStyleMatchingWidgetMgrImpl,			
			IID_ITREEVIEWHIERARCHYADAPTER,  kXPGUIStyleMatchingHierarchyAdapterImpl,				
			IID_IMATCHINGSTYLESLIST,		kXPGUIMatchingStylesListImpl,						
		}
	},

	Class
	{
		kXPGUIStyleMatchingNodeWidgetBoss,
		kTreeNodeWidgetBoss,
		{
			
		}
	},	
	
	Class{
	
		kXPGUIUpdateStyleMatchingWidgetBoss,
		kTreeViewWidgetBoss,
		{		
			IID_ITREEVIEWWIDGETMGR,			kXPGUIUpdateStyleMatchingWidgetMgrImpl,			
			IID_ITREEVIEWHIERARCHYADAPTER,  kXPGUIUpdateStyleMatchingHierarchyAdapterImpl,				
			IID_IFORMEMATCHINGSTYLESLIST,	kXPGUIFormeMatchingStylesListImpl,						
		}
	},

	Class
	{
		kXPGUIUpdateStyleMatchingNodeWidgetBoss,
		kTreeNodeWidgetBoss,
		{
			
		}
	},
	
	/**
		Our tree view widget subclassed as we must provide ITreeViewWidgetMgr and ITreeViewHierarchyAdapter implementations
		to work with tree-view control. 
		@ingroup paneltreeview
	*/
	
	Class
	{
		kXPGUIImagesViewWidgetBoss,
		kTreeViewWidgetBoss,
		{
			IID_ITREEVIEWWIDGETMGR, kXPGUIImagesTVWidgetMgrImpl,
			IID_ITREEVIEWHIERARCHYADAPTER, kXPGUIImagesTVHierarchyAdapterImpl,		
			IID_IOBSERVER, kXPGUIImagesViewObserverImpl,	
			IID_IDATAMODEL, kPMUnknownDataImpl,
		}
	},

	/**
	Subclass to allow us to use a proxy event handler (to catch double clicks), 
	to add drag-drop capability and to an observer for node expand/contract events.
	*/
	Class
	{
		kXPGUIImageNodeWidgetBoss,
		kTreeNodeWidgetBoss,
		{
			IID_IDRAGDROPSOURCE,  kXPGUIImageDragDropSourceImpl,
		}
	},
	
	/**
		Our tree view widget subclassed as we must provide ITreeViewWidgetMgr and ITreeViewHierarchyAdapter implementations
		to work with tree-view control. 
		@ingroup paneltreeview
	*/
	Class
	{
		kXPGUIFormesViewWidgetBoss,
		kTreeViewWidgetBoss,
		{
			/** Furnishes application framework with widgets as needed and geometry info */
			IID_ITREEVIEWWIDGETMGR,  kXPGUIFormesTVWidgetMgrImpl,
			
			/** Adapts our data model to the needs of the application framework */
			IID_ITREEVIEWHIERARCHYADAPTER,  kXPGUIFormesTVHierarchyAdapterImpl,	
			
			/** Observes changes in the selection within the tree-view */
			IID_IOBSERVER,  kXPGUIImagesFormesViewObserverImpl,		
		}
	},
	
	Class
	{
		kXPGUIDisplayImageFormePanelWidgetBoss,
		kGenericPanelWidgetBoss,
		{
			/** A custom draw implementation */
			IID_ICONTROLVIEW, kXPGUIDisplayImageFormePanelViewImpl,
			
			/** Path to forme to preview in this widget */
			IID_ISYSFILEDATA, kSysFileDataImpl,			
		}
	},
	/**
	Subclass to allow us to use a proxy event handler (to catch double clicks), 
	to add drag-drop capability and to an observer for node expand/contract events.
	*/
	Class
	{
		kXPGUIFormeNodeWidgetBoss,
		kTreeNodeWidgetBoss,
		{
			/** Provides the node with drag source capability for the SysFile
				associated with the widget.
			 */
			IID_IDRAGDROPSOURCE,  kXPGUIFormeDragDropSourceImpl,
		}
	},
	
	
	/** Register to be a layout DD target helper. i.e. we help the page item
		to import article associated to a forme from drag dropped file
	*/
	Class
	{
		kXPGUIArticleWithFormeInDocumentHelperBoss,
		kInvalidClass,
		{
			IID_IK2SERVICEPROVIDER, kLayoutDDTargHelperProviderImpl,
			IID_IDRAGDROPTARGETFLAVORHELPER, kXPGUIXRailArticleWithFormeDropTargetImpl,
		}
	},	
	
	/** Register to be a page item DD target helper. i.e. we help the page item
		to import xml from drag dropped file
	*/
	Class
	{
		kXPGUIXmlDataInPageItemHelperBoss,
		kInvalidClass,
		{
			IID_IK2SERVICEPROVIDER, kPageItemDDTargetHelperProviderImpl,
			IID_IDRAGDROPTARGETFLAVORHELPER, kXPGUIXRailXmlDropTargetImpl,
		}
	},
	
	/** Register to be a page item DD target helper. i.e. we help the page item
		to import image from drag dropped file
	*/
	Class
	{
		kXPGUIImageInPageItemHelperBoss,
		kInvalidClass,
		{
			IID_IK2SERVICEPROVIDER, kPageItemDDTargetHelperProviderImpl,
			IID_IDRAGDROPTARGETFLAVORHELPER, kXPGUIXRailImageDropTargetImpl,
		}
	},
	
	/** Register to be a layout DD target helper. i.e. we help the page item
		to import forme from drag dropped file
	*/
	Class
	{
		kXPGUIFormeInDocumentHelperBoss,
		kInvalidClass,
		{
			IID_IK2SERVICEPROVIDER, kLayoutDDTargHelperProviderImpl,
			IID_IDRAGDROPTARGETFLAVORHELPER, kXPGUIFormeDropTargetImpl,
		}
	},	
	
	/**
		 This boss class represents a dialog to choose a matching file
	*/
	Class
	{
		kXPGUINewFormeDialogBoss,
		kDialogBoss,
		{
			IID_IDIALOGCONTROLLER, kXPGUIXRailNewFormeDialogControllerImpl,			
			IID_INEWFORMEOBSERVER, kXPGUIXRailNewFormeDialogObserverImpl,
			IID_ICLASSEURNAMEDATA, kXPGUIClasseurNameDataImpl,		
			IID_ITEXTFRAMELIST, kXPGUITextFrameListImpl,		
			IID_IFORMESTYLESLIST, kXPGUIFormeStylesListImpl,	
			IID_IPHOTOLIST, kXPGUIPhotoListImpl,
			IID_ISTORYDATA, kUIDDataImpl,
			IID_ICREDITLIST,kXPGUICreditListImpl,
			IID_ILEGENDLIST, kXPGUILegendListImpl,			
			IID_IFORMEITEMLIST,	kXPGUIFormeItemListImpl,
			IID_IFORMEMATCHINGSTYLESLIST, kXPGUIFormeMatchingStylesListImpl,
            IID_IFIXEDCONTENTFRAMELIST,kXPGUIFixedContentFrameListImpl,
		}
	},
	
	Class
	{
		kXPGUIUpdateFormeDialogBoss,
		kDialogBoss,
		{
			IID_IDIALOGCONTROLLER, kXPGUIUpdateFormeDialogControllerImpl,			
			IID_ICLASSEURNAMEDATA, kXPGUIClasseurNameDataImpl,
			IID_IFORMENAMEDATA, kXPGUIFormeNameDataImpl,	
			IID_INODEDATA, kXPGPointerDataImpl,
		}
	},
	
	/**
		 This boss class represents a dialog to choose a style with his tag
	*/

	Class
	{
		kXPGUIStyleMatchingDialogBoss,
		kDialogBoss,
		{		
			IID_IDIALOGCONTROLLER, kXPGUIStyleMatchingDialogControllerImpl,
			IID_IFORMESTYLESLIST, kXPGUIFormeStylesListImpl,	
			IID_IFORMEMATCHINGSTYLESLIST, kXPGUIFormeMatchingStylesListImpl,
		}
	},
	
	Class
	{
		kXPGUIArticlePanelWidgetBoss,
		kPalettePanelWidgetBoss,
		{
			IID_IPANELMENUDATA, kCPanelMenuDataImpl,
			IID_IPANELDETAILCONTROLLER, kSizePanelDetailControllerImpl,			
			IID_IOBSERVER, kXPGUIArticlePanelObserverImpl,			
			IID_ICONTROLVIEW, kXPGUITextesPanelViewImpl,
		}
	},

	Class
	{	
		kXPGUIArticleViewWidgetBoss,
		kTreeViewWidgetBoss,
		{
			IID_ITREEVIEWWIDGETMGR,			kXPGUIArticleTVWidgetMgrImpl,			
			IID_ITREEVIEWHIERARCHYADAPTER,  kXPGUIArticleTVHierarchyAdapterImpl,			
			IID_IOBSERVER,					kXPGUIArticleViewObserverImpl,					
			IID_IDATAMODEL,					kPMUnknownDataImpl,
		}
	},	
		
	Class
	{
		kXPGUIArticleNodeWidgetBoss,
		kTreeNodeWidgetBoss,
		{			
			IID_IDRAGDROPSOURCE,  kXPGUIXRailTexteDragDropSourceImpl,
		}
	},		
	
	
	/** 
		Provides our own scrap handler for xml files
	*/
	
	Class
	{
		kXPGUIXmlWithFormeFileHandlerBoss,
		kSysFileDEHandlerBoss,
		{
			/** Overrides the data exchange handler. 
			*/
			IID_IDATAEXCHANGEHANDLER, kXPGUIXmlWithFormeFileHandlerImpl,		
			
			IID_ISTRINGLISTDATA, kStringListDataImpl,		
			IID_IRUBRIQUEIDDATA, kXPGUIRubriqueIdDataImpl,			
			IID_ICREDITPHOTO,	 kXPGUICreditPhotoImpl,
			IID_ILEGENDPHOTO,	 kXPGUILegendPhotoImpl,
		}
	},
	
	/** 
		Provides our own scrap handler for xml files
	*/
	Class
	{
		kXPGUIXmlFileHandlerBoss,
		kSysFileDEHandlerBoss,
		{
			/** Overrides the data exchange handler. 
			*/
			IID_IDATAEXCHANGEHANDLER, kXPGUIXmlFileHandlerImpl,			
			IID_ISTRINGLISTDATA, kStringListDataImpl,		
			IID_IRUBRIQUEIDDATA, kXPGUIRubriqueIdDataImpl,			
			IID_ICREDITPHOTO, kXPGUICreditPhotoImpl,
			IID_ILEGENDPHOTO, kXPGUILegendPhotoImpl,
		}
	},
	/** 
		Provides our own scrap handler for image files
	*/
	Class
	{
		kXPGUIImageFileHandlerBoss,
		kSysFileDEHandlerBoss,
		{
			/** Overrides the data exchange handler. 
			*/
			IID_IDATAEXCHANGEHANDLER, kXPGUIImageFileHandlerImpl,			
			IID_ICREDITPHOTO, kXPGUICreditPhotoImpl,
			IID_ILEGENDPHOTO, kXPGUILegendPhotoImpl,
		}
	},
	
	/** 
		Provides our own scrap handler for forme files
	*/
	Class
	{
		kXPGUIFormeFileHandlerBoss,
		kSysFileDEHandlerBoss,
		{
			/** Overrides the data exchange handler. 
			*/
			IID_IDATAEXCHANGEHANDLER, kXPGUIFormeFileHandlerImpl,						
		}
	},
	
	Class
	{
		kXPGUIDropDownListWidgetBoss,
		kDropDownListWidgetBoss,
		{
			IID_IIDLIST, kStringListDataImpl,
		}
	},
	
	Class
	{
		kXPGUIDisplayImagePanelWidgetBoss,
		kGenericPanelWidgetBoss,
		{
			/** A custom draw implementation */
			IID_ICONTROLVIEW, kXPGUIDisplayImagePanelViewImpl,
			
			/** Path to image to preview in this widget */
			IID_ISYSFILEDATA, kSysFileDataImpl,
			
			/** Image index */
			IID_IINTDATA, kIntDataImpl,
		}
	},
	
	/**
		 This boss class represents a dialog to choose a matching file
	*/
		
	
	/** Dialog to order an article in TES
	*/
	Class
	{
		kXPGUIOrderArtDialogBoss,
		kDialogBoss,
		{
			/** Provides management and control over the dialog.*/
			IID_IDIALOGCONTROLLER, kXPGUIOrderArtDialogControllerImpl,			
			IID_IOBSERVER,         kXPGUIOrderArtDialogObserverImpl,
			
		},
	},
	   
	/** Dialog to link a story with TES
	*/
	Class
	{
		kXPGUILinkArtDialogBoss,
		kDialogBoss,
		{
			/** Provides management and control over the dialog.
			*/
			IID_IDIALOGCONTROLLER,			kXPGUILinkArtDialogControllerImpl,			
			IID_IOBSERVER,					kXPGUILinkArtDialogObserverImpl,
			
			IID_IARTICLEIDDATA,				kXPGUIArticleIdImpl,
			IID_IARTICLESNIPPETFILEDATA,    kXPGUIArticleSnippetDataImpl,
			IID_IARTICLEXMLFILEDATA,		kXPGUIArticleXMLDataImpl,
			IID_IARTICLETOPICDATA,          kXPGUIArticleTopicDataImpl,					
			IID_IARTICLEIDSTATUS,			kXPGUIArticleIdStatusDataImpl,		
			IID_IARTICLELIBELLESTATUS,		kXPGUIArticleLibelleStatusDataImpl,		
			IID_IARTICLECOULEURSTATUS,		kXPGUIArticleCouleurStatusDataImpl,		
			IID_IARTICLETYPEDATA,           kXPGUIArticleTypeDataImpl, 	   		
			IID_IARTICLERUBDATA, 			kXPGUIArticleRubDataImpl,	 
			IID_IARTICLESUBRUBDATA,         kXPGUIArticleSubRubDataImpl,
			IID_IPMPOINTDATA,				kPMPointDataImpl,
			IID_IUIDDATA,					kUIDDataImpl,			
			
		},
	},
	   
	Class
	{
		kXPGUIAddToArtDialogBoss,
		kDialogBoss,
		{
			/** Provides management and control over the dialog.
			*/
			IID_IDIALOGCONTROLLER, kXPGUIAddToArtDialogControllerImpl,	
			IID_IOBSERVER, kXPGUIAddToArtDialogObserverImpl,	
			IID_IUIDDATA , kUIDDataImpl,
		},
	},

	
	/** Adornment added to frames during forme creation to show their type
	 */
	Class 
	{
		kXPGUIFormeAdornmentBoss,
		kInvalidClass,
		{
			/** See IAdornmentShape
			*/
			IID_IADORNMENTSHAPE, kXPGUIFormeAdornmentShapeImpl,
		}
		
	},
  
    Class
	{
		kXPGUIArticleAdornmentBoss,
		kInvalidClass,
		{
			IID_IADORNMENTSHAPE, kXPGUIArticleAdornmentImpl,
		}
	},
	
	// Placed forme adornments
	Class
	{
		kXPGUIPlacedFormeHeaderAdornmentBoss,
		kInvalidClass,
		{
			IID_IADORNMENTSHAPE, kXPGUIPlacedFormeHeaderAdornmentImpl,
		}		
	},
	  
	Class
	{
		kXPGUIPlacedFormeContentAdornmentBoss,
		kInvalidClass,
		{
			IID_IADORNMENTSHAPE, kXPGUIPlacedFormeContentAdornmentImpl,
		}		
	},
	
	Class
	{
		kXPGUIPlacedFormeFooterAdornmentBoss,
		kInvalidClass,
		{
			IID_IADORNMENTSHAPE, kXPGUIPlacedFormeFooterAdornmentImpl,
		}
		
	},
	
	Class
	{
		kXPGUIResaRedacPanelWidgetBoss,
		kPalettePanelWidgetBoss,
		{
			/** The plug-in's implementation of ITextControlData with an exotic IID of IID_IPANELMENUDATA.
			Implementation provided by the API.
			*/
			IID_IPANELMENUDATA, kCPanelMenuDataImpl,			
			
			IID_IOBSERVER, kXPGUIResaRedacPanelObserverImpl,
		}
	},
	
	/** Adornment added to frames during forme creation to show their type
	 */
	Class 
	{
		kXPGUIResaRedacAdornmentBoss,
		kInvalidClass,
		{
			/** See IAdornmentShape
			*/
			IID_IADORNMENTSHAPE, kXPGUIResaRedacAdornmentShapeImpl,
		}
		
	},
	
	Class
	{
		kXPGUIAssemblagesPanelWidgetBoss,
		kPalettePanelWidgetBoss,
		{
			/** The plug-in's implementation of ITextControlData with an exotic IID of IID_IPANELMENUDATA.
			Implementation provided by the API.
			*/
			IID_IPANELMENUDATA, kCPanelMenuDataImpl,
			
			/**
				Allows varying level of detail exposed by a widget.
			*/
			IID_IPANELDETAILCONTROLLER, kSizePanelDetailControllerImpl,
			
			IID_IOBSERVER, kXPGUIAssemblagesPanelObserverImpl,
			
			IID_ICONTROLVIEW, kXPGUITextesPanelViewImpl,
		}
	},
	
	/**
		Our tree view widget subclassed as we must provide ITreeViewWidgetMgr and ITreeViewHierarchyAdapter implementations
		to work with tree-view control. 
		@ingroup paneltreeview
	*/
	Class
	{
		kXPGUIAssemblagesViewWidgetBoss,
		kTreeViewWidgetBoss,
		{
			IID_ITREEVIEWWIDGETMGR, kXPGUIFormesTVWidgetMgrImpl,
			IID_ITREEVIEWHIERARCHYADAPTER, kXPGUIAssemblagesTVHierarchyAdapterImpl,	
			IID_IOBSERVER, kXPGUIImagesFormesViewObserverImpl,		
		}
	},
	
	Class
	{
		kXPGUINewAssemblageDialogBoss,
		kDialogBoss,
		{
			IID_IDIALOGCONTROLLER, kXPGUINewAssemblageDialogControllerImpl,
		}
	},

}}};

/*  Implementation definition.
*/
resource FactoryList (kSDKDefFactoryListResourceID)
{
	kImplementationIDSpace,
	{
		#include "XPGUIFactoryList.h"
	}
};

/*  Menu definition.
*/
resource MenuDef (kSDKDefMenuResourceID)
{
	{
		/** Formes palette menus **/		
		kXPGUINewFormeActionID,
		kXPGUIFormePopupMenuPath,
		kXPGUINewFormeMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,		
		
		kXPGUINewClasseurActionID,
		kXPGUIFormePopupMenuPath,
		kXPGUINewClasseurMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,
		
		kXPGUIDeleteClasseurActionID,
		kXPGUIFormePopupMenuPath,
		kXPGUIDeleteClasseurMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,

		kXPGUIExportXMLActionID,					// ActionID (kInvalidActionID for positional entries)
		kXPGUIFormePopupMenuPath,					// Menu Path.
		kXPGUIExportXMLMenuItemPosition,			// Menu Position.
		kSDKDefIsNotDynamicMenuFlag,		
				
				
		kXPGUISeparator2ActionID,
		kXPGUIFormePopupMenuPath kSDKDefDelimiterAndSeparatorPath,
		kXPGUISeparator2MenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,
		
		kXPGUIRefreshActionID,						// ActionID (kInvalidActionID for positional entries)
		kXPGUIFormePopupMenuPath,					// Menu Path.
		kXPGUIRefreshFormeMenuItemPosition,			// Menu Position.
		kSDKDefIsNotDynamicMenuFlag,	
		
		kXPGUISeparator3ActionID,
		kXPGUIFormePopupMenuPath kSDKDefDelimiterAndSeparatorPath,
		kXPGUISeparator3MenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,			
			
		// The About Plug-ins sub-menu item for this plug-in.
		kXPGUIAboutActionID,		    	// ActionID (kInvalidActionID for positional entries)
		kXPGUIFormePopupMenuPath,			// Menu Path.
		kXPGUIAboutThisMenuItemPosition,	// Menu Position.
		kSDKDefIsNotDynamicMenuFlag,		// kSDKDefIsNotDynamicMenuFlag or kSDKDefIsDynamicMenuFlag
		
		kXPGUIShowHideResaRedacActionID,
		kXPGUIResaRedacPopupMenuPath,
		kXPGUIShowHideResaRedacMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,
		
		/** Assemblages palette menus **/
		kXPGUINewAssemblageActionID,
		kXPGUIAssemblagePopupMenuPath,
		kXPGUINewAssemblageMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,
		
		kXPGUIDeleteAssemblageActionID,
		kXPGUIAssemblagePopupMenuPath,
		kXPGUIDeleteAssemblageMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,
		
		kXPGUISeparator4ActionID,
		kXPGUIAssemblagePopupMenuPath kSDKDefDelimiterAndSeparatorPath,
		kXPGUISeparator4MenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,
		
		kXPGUINewClasseurAssemblageActionID,
		kXPGUIAssemblagePopupMenuPath,
		kXPGUINewClasseurAssemblageMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,
		
		kXPGUIDeleteClasseurAssemblageActionID,
		kXPGUIAssemblagePopupMenuPath,
		kXPGUIDeleteClasseurAssemblageMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,
				
		kXPGUISeparator5ActionID,
		kXPGUIAssemblagePopupMenuPath kSDKDefDelimiterAndSeparatorPath,
		kXPGUISeparator5MenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,
		
		kXPGUIRefreshAssemblageActionID,		// ActionID (kInvalidActionID for positional entries)
		kXPGUIAssemblagePopupMenuPath,					// Menu Path.
		kXPGUIRefreshAssemblageMenuItemPosition,			// Menu Position.
		kSDKDefIsNotDynamicMenuFlag,	

	}
};

/* Action definition.
*/
resource ActionDef (kSDKDefActionResourceID)
	{					
		{
		/** Formes palette actions **/
		kXPGUIActionComponentBoss,						// ClassID of boss class that implements the ActionID.
		kXPGUINewFormeActionID,							// ActionID.
		kXPGUINewFormeTextKey,							// Sub-menu string - dynamic
		kOtherActionArea,								// Area name (see ActionDefs.h).
		kNormalAction,									// Type of action (see ActionDefs.h).
		kDisableIfLowMem | kCustomEnabling,				// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,							// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag,
		
		kXPGUIActionComponentBoss, 						// ClassID of boss class that implements the ActionID.
		kXPGUIDeleteFormeActionID,						// ActionID.
		kXPGUIDeleteFormeTextKey,						// Sub-menu string - dynamic
		kOtherActionArea,								// Area name (see ActionDefs.h).
		kNormalAction,									// Type of action (see ActionDefs.h).
		kDisableIfLowMem | kCustomEnabling,				// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,							// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag,		
		
		kXPGUIActionComponentBoss, 						// ClassID of boss class that implements the ActionID.
		kXPGUINewClasseurActionID,						// ActionID.
		kXPGUINewClasseurTextKey,						// Sub-menu string - dynamic
		kOtherActionArea,								// Area name (see ActionDefs.h).
		kNormalAction,									// Type of action (see ActionDefs.h).
		kDisableIfLowMem | kCustomEnabling,				// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,							// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag,
		
		kXPGUIActionComponentBoss, 						// ClassID of boss class that implements the ActionID.
		kXPGUIDeleteClasseurActionID,					// ActionID.
		kXPGUIDeleteClasseurTextKey,					// Sub-menu string - dynamic
		kOtherActionArea,								// Area name (see ActionDefs.h).
		kNormalAction,									// Type of action (see ActionDefs.h).
		kDisableIfLowMem | kCustomEnabling,				// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,							// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag,				// kSDKDefVisibleInKBSCEditorFlag or kSDKDefInvisibleInKBSCEditorFlag.	
								
		kXPGUIActionComponentBoss, 						// ClassID of boss class that implements the ActionID.
		kXPGUIExportXMLActionID,						// ActionID.
		kXPGUIExportXMLTextKey,							// Sub-menu string - dynamic
		kOtherActionArea,								// Area name (see ActionDefs.h).
		kNormalAction,									// Type of action (see ActionDefs.h).
		kDisableIfLowMem,								// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,							// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag,				// kSDKDefVisibleInKBSCEditorFlag or kSDKDefInvisibleInKBSCEditorFlag.	
						
		kXPGUIActionComponentBoss, 						// ClassID of boss class that implements the ActionID.
		kXPGUIAboutActionID,							// ActionID.
		kXPGUIAboutMenuKey,								// Sub-menu string.
		kOtherActionArea,								// Area name (see ActionDefs.h).
		kNormalAction,									// Type of action (see ActionDefs.h).
		kDisableIfLowMem,								// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,							// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag,				// kSDKDefVisibleInKBSCEditorFlag or kSDKDefInvisibleInKBSCEditorFlag.	
				
		kXPGUIActionComponentBoss, 						// ClassID of boss class that implements the ActionID.
		kXPGUIRefreshActionID,							// ActionID.
		kXPGUIRefreshTextKey,							// Sub-menu string - dynamic
		kOtherActionArea,								// Area name (see ActionDefs.h).
		kNormalAction,									// Type of action (see ActionDefs.h).
		kDisableIfLowMem,								// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,							// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag,				// kSDKDefVisibleInKBSCEditorFlag or kSDKDefInvisibleInKBSCEditorFlag.	
	
		kXPGUIActionComponentBoss, 						// ClassID of boss class that implements the ActionID.
		kXPGUIShowHideResaRedacActionID,							// ActionID.
		kXPGUIShowHideResaRedacTextKey,							// Sub-menu string - dynamic
		kOtherActionArea,								// Area name (see ActionDefs.h).
		kNormalAction,									// Type of action (see ActionDefs.h).
		kCustomEnabling,								// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,							// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag,				// kSDKDefVisibleInKBSCEditorFlag or kSDKDefInvisibleInKBSCEditorFlag.	
		
		/** Assemblages palette actions **/
		kXPGUIActionComponentBoss,						// ClassID of boss class that implements the ActionID.
		kXPGUINewAssemblageActionID,							// ActionID.
		kXPGUINewAssemblageTextKey,							// Sub-menu string - dynamic
		kOtherActionArea,								// Area name (see ActionDefs.h).
		kNormalAction,									// Type of action (see ActionDefs.h).
		kDisableIfLowMem | kCustomEnabling,				// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,							// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag,
		
		kXPGUIActionComponentBoss, 						// ClassID of boss class that implements the ActionID.
		kXPGUIDeleteAssemblageActionID,						// ActionID.
		kXPGUIDeleteAssemblageTextKey,						// Sub-menu string - dynamic
		kOtherActionArea,								// Area name (see ActionDefs.h).
		kNormalAction,									// Type of action (see ActionDefs.h).
		kDisableIfLowMem | kCustomEnabling,				// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,							// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag,		
		
		kXPGUIActionComponentBoss, 						// ClassID of boss class that implements the ActionID.
		kXPGUINewClasseurAssemblageActionID,						// ActionID.
		kXPGUINewClasseurTextKey,						// Sub-menu string - dynamic
		kOtherActionArea,								// Area name (see ActionDefs.h).
		kNormalAction,									// Type of action (see ActionDefs.h).
		kDisableIfLowMem | kCustomEnabling,				// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,							// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag,
		
		kXPGUIActionComponentBoss, 						// ClassID of boss class that implements the ActionID.
		kXPGUIDeleteClasseurAssemblageActionID,					// ActionID.
		kXPGUIDeleteClasseurTextKey,					// Sub-menu string - dynamic
		kOtherActionArea,								// Area name (see ActionDefs.h).
		kNormalAction,									// Type of action (see ActionDefs.h).
		kDisableIfLowMem | kCustomEnabling,				// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,							// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag,				// kSDKDefVisibleInKBSCEditorFlag or kSDKDefInvisibleInKBSCEditorFlag.	
				
		kXPGUIActionComponentBoss, 						// ClassID of boss class that implements the ActionID.
		kXPGUIRefreshAssemblageActionID,				// ActionID.
		kXPGUIRefreshTextKey,							// Sub-menu string - dynamic
		kOtherActionArea,								// Area name (see ActionDefs.h).
		kNormalAction,									// Type of action (see ActionDefs.h).
		kDisableIfLowMem,								// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,							// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag,				// kSDKDefVisibleInKBSCEditorFlag or kSDKDefInvisibleInKBSCEditorFlag.
	}
};


/*  LocaleIndex
	The LocaleIndex should have indicies that point at your
	localizations for each language system that you are localized for.
*/
/*  String LocaleIndex.
*/
resource LocaleIndex ( kSDKDefStringsResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_enUS, kSDKDefStringsResourceID + index_frFR
		kWildFS, k_enGB, kSDKDefStringsResourceID + index_frFR
		kWildFS, k_deDE, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_frFR, kSDKDefStringsResourceID + index_frFR
		kWildFS, k_esES, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_ptBR, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_svSE, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_daDK, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_nlNL, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_itIT, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_nbNO, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_fiFI, kSDKDefStringsResourceID + index_enUS
		kInDesignJapaneseFS, k_jaJP, kSDKDefStringsResourceID + index_enUS
	}
};

resource LocaleIndex (kSDKDefStringsNoTransResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_Wild, kSDKDefStringsNoTransResourceID + index_enUS
	}
};

resource StringTable (kSDKDefStringsNoTransResourceID + index_enUS)
{
	k_enUS,									// Locale Id
	kEuropeanMacToWinEncodingConverter,		// Character encoding converter
	{
		kXPGUIFormePopupMenuNameKey, kXPGUIFormePopupMenuNameKey,
		kXPGUIResaRedacPopupMenuNameKey, kXPGUIResaRedacPopupMenuNameKey,
		kXPGUIAssemblagePopupMenuNameKey, kXPGUIAssemblagePopupMenuNameKey,
	}
};

resource PanelList ((kSDKDefPanelResourceID))
{
	{

		// 1st panel in the list
		kXPGUIFormesPanelResourceID,	// Resource ID for this panel (use SDK default rsrc ID)
		kXPGUIPluginID,			// ID of plug-in that owns this panel
		kNotResizable  ,
		kXPGUIFormesPanelWidgetActionID,	// Action ID to show/hide the panel
		kXPGUIFormesPanelTitleKey,	// Shows up in the Window list.
		"",							// Alternate menu path of the form "Main:Foo" if you want your palette menu item in a second place
		0.0,
		0,0,								// Rsrc ID, Plugin ID for a PNG icon resource to use for this palette
		c_Panel,
				
		// 2nd panel in the list
		kXPGUIArticlePanelResourceID,	// Resource ID for this panel (use SDK default rsrc ID)
		kXPGUIPluginID,			// ID of plug-in that owns this panel
		kNotResizable  ,
		kXPGUIArticlePanelWidgetActionID,	// Action ID to show/hide the panel
		kXPGUIArticlePanelMenuKey,	// Shows up in the Window list.
		"",							// Alternate menu path of the form "Main:Foo" if you want your palette menu item in a second place
		0.0,
		0,0,								// Rsrc ID, Plugin ID for a PNG icon resource to use for this palette
		c_Panel,

		// 3rd panel in the list
		kXPGUIXRailImagesPanelResourceID,	// Resource ID for this panel (use SDK default rsrc ID)
		kXPGUIPluginID,			// ID of plug-in that owns this panel
		kNotResizable  ,// Z-order in palette
		kXPGUIImagesPanelWidgetActionID,	// Action ID to show/hide the panel
		kXPGUIImagesPanelMenuKey,	// Shows up in the Window list.
		"",							// Alternate menu path of the form "Main:Foo" if you want your palette menu item in a second place
		0.0,
		0,0,
		c_Panel,
		
		
		// 4rd panel in the list
		kXPGUIStatisticsPanelResourceID,	// Resource ID for this panel (use SDK default rsrc ID)
		kXPGUIPluginID,			// ID of plug-in that owns this panel
		kNotResizable   ,// Z-order in palette
		kXPGUIStatisticsPanelActionID,	// Action ID to show/hide the panel
		kXPGUIStatisticsPanelMenuKey,	// Shows up in the Window list.
		"",							// Alternate menu path of the form "Main:Foo" if you want your palette menu item in a second place
		0.0,
		0,0,
		c_Panel,

		// 5th panel in the list
		kXPGUIResaRedacPanelResourceID,	// Resource ID for this panel (use SDK default rsrc ID)
		kXPGUIPluginID,			// ID of plug-in that owns this panel
		kNotResizable   ,// Z-order in palette
		kXPGUIResaRedacPanelActionID,	// Action ID to show/hide the panel
		kXPGUIResaRedacPanelTitleKey,	// Shows up in the Window list.
		"",							// Alternate menu path of the form "Main:Foo" if you want your palette menu item in a second place
		0.0,
		0,0,
		c_Panel,

		// 6th panel in the list
		kXPGUIAssemblagesPanelResourceID,	// Resource ID for this panel (use SDK default rsrc ID)
		kXPGUIPluginID,			// ID of plug-in that owns this panel
		kNotResizable   ,// Z-order in palette
		kXPGUIAssemblagesPanelActionID,	// Action ID to show/hide the panel
		kXPGUIAssemblagesPanelTitleKey,	// Shows up in the Window list.
		"",							// Alternate menu path of the form "Main:Foo" if you want your palette menu item in a second place
		0.0,
		0,0,
		c_Panel,
		
		
	}	
};

resource PNGA(kXPGUIPreviousIconResourceID)				"previous.png"
resource PNGA(kXPGUIOKIconResourceID)					"ok_icon.png"
resource PNGA(kXPGUIKOIconResourceID)					"ko_icon.png"
resource PNGA(kXPGUITextNewIconResourceID)				"story_new.png"
resource PNGA(kXPGUITextUpdateIconResourceID)			"story_update.png"
resource PNGA(kXPGUITextDeleteIconResourceID)			"story_delete.png"
resource PNGA(kXPGUITextAddToAssignmentIconResourceID)  "story_addTo.png"
resource PNGA(kXPGUIJavaIconResourceID)					"java.png"
resource PNGA(kXPGUIInCopyFroidIconResourceID)			"marbre.png"
resource PNGA(kXPGUIPictureIconResourceID)				"picture.png"
resource PNGA(kXPGUITextPlacedIconResourceID)           "placed.png"
resource PNGA(kXPGUIAppliquerIconResourceID)			"appliquer.png"
resource PNGA(kXPGUIGotoStoryIconResourceID)			"goto_story.png"

/*
// ------------Images Panel resources.--------------
*/

resource LocaleIndex (kXPGUIImagesPanelResourceID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, 	kXPGUIImagesPanelResourceID + index_enUS
	}
};

/*  Type definition.
*/
type XPGUIImagesPanelWidget(kViewRsrcType) : GenericPalettePanelWidget (ClassID = kXPGUIImagesPanelWidgetBoss)
{
	CPanelMenuData;
	SizePanelDetailController;
}

type XPGUIImagesViewWidget(kViewRsrcType) : TreeViewWidget(ClassID = kXPGUIImagesViewWidgetBoss) 
{
};

type XPGUIImageNodeWidget(kViewRsrcType) : PrimaryResourcePanelWidget(ClassID = kXPGUIImageNodeWidgetBoss) 
{
};

type XPGUIDisplayImagePanelWidget(kViewRsrcType) : GenericPanelWidget(ClassID = kXPGUIDisplayImagePanelWidgetBoss)
{
};

/*
// Panel definition.
// This view is not localized: therefore, it can reside here.
// However, if you wish to localize it, it is recommended to
// locate it in one of the localized framework resource files
// (i.e. BscSlDlg_enUS.fr etc.) and update your Panel
// LocaleIndex accordingly.
*/
resource XPGUIImagesPanelWidget (kXPGUIImagesPanelResourceID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUIImagesPanelWidgetID, // WidgetId
	kPMRsrcID_None, // RsrcId
	kBindNone, // Frame binding
	Frame(0,0,537,200) // Frame
	kTrue, // Visible
	kTrue, // Enabled
	kTrue, // Erase background
	kInterfacePaletteFill, // Erase to color
	kFalse, // Draw dropshadow
	kXPGUIImagesPanelTitleKey, // Panel name
	{
		XPGUIImagesViewWidget 
		( 
			kXPGUIImagesViewWidgetID, 
			kPMRsrcID_None, // WidgetId, RsrcId
			kBindAll, 
			Frame(0,10,397,183) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			kTrue, // EraseBeforeDraw
			kInterfacePaletteFill, // InterfaceColor
			"", 
			kFalse, // Display root node
			kFalse, // Use H Scroll bar
			kTrue, // Use V scroll bar
			20, // fVScrollButtonIncrement
			20, // fVThumbScrollIncrement
			20, // fHScrollButtonIncrement
			20, // fHThumbScrollIncrement
			1, // Items selectable, 0 = No Selection, 1 = Single Selection, 2 = Multiple Selection
			kFalse, // Allow children from multiple parents to be selected
			kFalse, // Allow discontiguous selection
			{
			} 
		),
		XPGUIDisplayImagePanelWidget 
		( 
			kXPGUIDisplayImagePanelWidgetID, // WidgetId
			kPMRsrcID_None, // RsrcId
			kBindTop | kBindBottom | kBindRight, 
			Frame(400,10,535,183) // Frame
			kTrue, // Visible
			kTrue, // Enabled
			"", 
			{
			} 
		),
		SeparatorWidget 
		( 
			0, // WidgetId
			kPMRsrcID_None, // RsrcId
			kBindLeft | kBindRight | kBindBottom, 
			Frame(0,184,537,186) // Frame
			kTrue, 
			kTrue,  // Visible, Enabled
		),
		CheckBoxWidget 
		( 
			kXPGUIFilterImageWidgetID, // WidgetId
			kSysCheckBoxPMRsrcId, // RsrcId
			kBindBottom | kBindLeft, 
			Frame(5,187,300,199) // Frame
			kTrue, // Visible
			kTrue, // Enabled
			kAlignLeft, // Alignment
			kXPGUIFilterImageKey,  // Initial text
		),
		InfoStaticTextWidget 
		( 
			kXPGUICurrentNumeroWidgetID, 
			kPMRsrcID_None, // WidgetId, RsrcId
			kBindRight | kBindBottom, // Frame binding
			Frame(301,187,520,199) // Frame
			kTrue, 
			kTrue, 
			kAlignRight, 
			kEllipsizeEnd, // Visible, Enabled
			kTrue,
			"", // Text
			0, 
			kDialogWindowSystemScriptFontId, 
			kDialogWindowSystemScriptHiliteFontId,
		),
	}
	kXPGUIInternalPopupMenuNameKey,  
};

resource LocaleIndex (kXPGUIImageNodeWidgetRsrcID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, 	kXPGUIImageNodeWidgetRsrcID + index_enUS
	}
};

resource XPGUIImageNodeWidget (kXPGUIImageNodeWidgetRsrcID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUIImageNodeWidgetId, 
	kPMRsrcID_None, // WidgetId, RsrcId
	kBindLeft | kBindRight, // Frame binding
	Frame(0,0,387,20) // Frame (left, top, right, bottom)
	kTrue, 
	kTrue, // Visible, Enabled
	"", // Panel name
	{
		// Drop down arrow
		TreeExpanderWidget 
		( 
			kTreeNodeExpanderWidgetID, // WidgetId
			kTreeBranchCollapsedRsrcID, // RsrcId for collapsed node icon
			kApplicationRsrcPluginID, // RsrcPlugin for collapsed node icon
			kBindLeft, // Frame binding
			Frame(2,4,18,18) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			kTreeBranchExpandedRsrcID, // RsrcId for expanded node icon
			kApplicationRsrcPluginID, // RsrcPlugin for expanded node icon
			kTrue, // Cmd-Click expands/collapses children
			kFalse, // Scroll to show children when expanded
			kIconNoCentering, 
			kIconRaisedLook, // Sets the icon look -- (kIconRaisedLook | kIconFlushLook)
			kFalse,  // Bool integer sets whether the icon draws a well.
		),
		InfoStaticTextWidget 
		( 
			kXPGUIImageNameWidgetID, // WidgetId
			kPMRsrcID_None, // RsrcId
			kBindLeft | kBindRight, // Frame binding
			Frame(19,0,376,18) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			kAlignLeft, // Alignment
			kDontEllipsize, // Ellipsize style
			kTrue,
			"", // Text Control Data
			0, // WidgetId for associated control for shortcut focus
			kPaletteWindowSystemScriptFontId, 
			kPaletteWindowSystemScriptFontId,
		),
	} 
}

/*
// ------------Gabarit list dialog resources.--------------
*/

type XPGUIDropDownListWidget(kViewRsrcType) : DropDownListWidget(ClassID = kXPGUIDropDownListWidgetBoss){};


/*
// ------------New Forme dialog resources.--------------
*/
type XPGUINewFormeDialogWidget(kViewRsrcType) : DialogBoss(ClassID = kXPGUINewFormeDialogBoss) 
{
};

resource LocaleIndex (kXPGUINewFormeDialogResourceID)
{
   kViewRsrcType,
	{
		kWildFS,	k_Wild, kXPGUINewFormeDialogResourceID + index_enUS
	}
};


resource XPGUINewFormeDialogWidget (kXPGUINewFormeDialogResourceID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUINewFormeDialogWidgetID, // WidgetID
	kPMRsrcID_None, // RsrcID
	kBindNone, // Binding
	Frame(0,0,430,200) // Frame (l,t,r,b)
	kTrue, 
	kTrue, // Visible, Enabled
	kXPGUINewFormeDialogTitleKey, // Dialog name
	{
		StaticTextWidget 
		( 
			0, 
			kSysStaticTextPMRsrcId, // WidgetId, RsrcId
			kBindNone, 
			Frame(10,10,120,27) // Frame left, top, right, bottom
			kTrue, 
			kTrue, 
			kAlignLeft, // Visible, Enabled, Alignment
			kEllipsizeEnd, 
			kTrue,
			kXPGUIFormeNameKey, 
			0,  // WidgetID this shortcut is connected to, 0 if none.
		),
		TextEditBoxWidget 
		( 
			kXPGUIFormeNameWidgetID, 
			kSysEditBoxPMRsrcId, // WidgetId, RsrcId
			kBindNone, 
			Frame(130, 10, 390, 30) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			0, // widget id of nudge button
			0, 
			0, // small/large nudge amount
			0, // max num chars( 0 = no limit)
			kFalse, // is read only
			kFalse, // should notify each key stroke
			kFalse, // range checking enabled
			kFalse, // blank entry allowed
			0, 
			0, // upper/lower bounds
			"",  // initial text
		),
		StaticTextWidget 
		( 
			0, 
			kSysStaticTextPMRsrcId, // WidgetId, RsrcId
			kBindNone, 
			Frame(10, 40, 110, 57) // Frame left, top, right, bottom
			kTrue, 
			kTrue, 
			kAlignLeft, // Visible, Enabled, Alignment
			kEllipsizeEnd, 
			kTrue,
			kXPGUIClasseurTextKey, 
			0,  // WidgetID this shortcut is connected to, 0 if none.
		),
		XPGUIDropDownListWidget 
		( 
			kXPGUIRubriqueListWidgetID, 
			kSysDropDownPMRsrcId, // WidgetId, RsrcId
			kBindLeft | kBindRight, // Frame binding
			Frame(120, 40, 390, 60) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			{
				{				// List Items
				}
			},
		),
        CheckBoxWidget
        (
            kXPGUIFixedContentWidgetID, // WidgetId
            kSysCheckBoxPMRsrcId, // RsrcId
            kBindTop | kBindRight,
            Frame(15, 75, 155, 92) // Frame
            kTrue, // Visible
            kTrue, // Enabled
            kAlignLeft, // Alignment
            kXPGUIkFixedContentKey,  // Initial text
        ),
		GenericPanelWithBorderWidget 
		( 
			0, // widget ID
			kPMRsrcID_None, // PMRsrc ID
			kBindAll, // frame binding
			Frame(10,105,420,157) //  left, top, right, bottom
			kTrue, // visible
			kTrue, // enabled
			"", 
			{				
				DropDownListWidget 
				( 
					kXPGUIPhotoListWidgetID, 
					kSysDropDownPMRsrcId, // WidgetId, RsrcId
					kBindLeft | kBindRight, // Frame binding
					Frame(5, 18, 85, 35) // Frame (l,t,r,b)
					kTrue, 
					kTrue, // Visible, Enabled
					{
						{				// List Items
						}
					},
				),
				CheckBoxWidget 
				( 
					kXPGUICreditPhotoWidgetID, // WidgetId
					kSysCheckBoxPMRsrcId, // RsrcId
					kBindTop | kBindRight, 
					Frame(90, 18, 150, 35) // Frame
					kTrue, // Visible
					kTrue, // Enabled
					kAlignLeft, // Alignment
					kXPGUICreditKey,  // Initial text
				),
				ButtonWidget 
				( 
					kXPGUIDefineCreditPhotoWidgetID,	// WidgetId
					kSysButtonPMRsrcId,					// RsrcId
					kBindRight | kBindTop,				// Frame binding
					Frame(152, 18, 217, 35) 
					kTrue,								// Visible
					kTrue,								// Enabled
					kXPGUIDefineKey,					// Button name
				),
				IconSuiteWidget 
				(  
					kXPGUIStatusCreditPhotoWidgetID, // widget ID
					kXPGUIOKIconResourceID, 
					kXPGUIPluginID,					 // icon, plugin ID
					kBindRight | kBindBottom,		 // frame binding
					Frame(220, 17, 232, 34)			 //  left, top, right, bottom
					kTrue,							 // visible
					kTrue,							 // enabled
					kADBEIconSuiteButtonType, 
					0,
				),
				CheckBoxWidget 
				( 
					kXPGUILegendPhotoWidgetID,		// WidgetId
					kSysCheckBoxPMRsrcId,			// RsrcId
					kBindTop | kBindRight, 
					Frame(247, 18, 322, 35) 
					kTrue,							// Visible
					kTrue,							// Enabled
					kAlignLeft,						// Alignment
					kXPGUILegendKey,				// Initial text
				),
				ButtonWidget 
				( 
					kXPGUIDefineLegendPhotoWidgetID, // WidgetId
					kSysButtonPMRsrcId, 			 // RsrcId
					kBindRight | kBindTop, 			 // Frame binding
					Frame(323, 18, 388, 35) 
					kTrue, 							 // Visible
					kTrue, 							 // Enabled
					kXPGUIDefineKey,  				 // Button name
				),
				IconSuiteWidget 
				(  
					kXPGUIStatusLegendPhotoWidgetID, // widget ID
					kXPGUIKOIconResourceID, 
					kXPGUIPluginID, 				 // icon, plugin ID
					kBindRight | kBindBottom, 		 // frame binding
					Frame(391, 17, 403, 34) 		 //  left, top, right, bottom
					kTrue, 							 // visible
					kTrue, 							 // enabled
					kADBEIconSuiteButtonType, 
					0,
				),
			} 
		),
		DefaultButtonWidget 
		( 
			kOKButtonWidgetID, // WidgetID
			kSysButtonPMRsrcId, // RsrcID
			kBindNone, // Binding
			Frame(105,170,185,190) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			kSDKDefOKButtonApplicationKey,  // Button text
		),
		CancelButtonWidget 
		( 
			kCancelButton_WidgetID, // WidgetID
			kSysButtonPMRsrcId, // RsrcID
			kBindNone, // Binding
			Frame(195,170,275,190) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			kSDKDefCancelButtonApplicationKey, // Button name
			kFalse,  // Change to Reset on option-click.
		),
	} 
};
/*
// ------------Edit Forme dialog resources.--------------
*/

type XPGUIUpdateStyleMatchingViewWidget(kViewRsrcType) : TreeViewWidget(ClassID = kXPGUIUpdateStyleMatchingWidgetBoss) 
{
};

type XPGUIUpdateStyleMatchingNodeWidget(kViewRsrcType) : PrimaryResourcePanelWidget(ClassID = kXPGUIUpdateStyleMatchingNodeWidgetBoss) 
{
};

type XPGUIUpdateFormeDialogWidget(kViewRsrcType) : DialogBoss(ClassID = kXPGUIUpdateFormeDialogBoss) 
{
};

resource LocaleIndex (kXPGUIUpdateFormeDialogResourceID)
{
   kViewRsrcType,
	{
		kWildFS,	k_Wild, kXPGUIUpdateFormeDialogResourceID + index_enUS
	}
};

resource XPGUIUpdateFormeDialogWidget (kXPGUIUpdateFormeDialogResourceID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUIUpdateFormeDialogWidgetID, // WidgetID
	kPMRsrcID_None, // RsrcID
	kBindNone, // Binding
	Frame(5,5,266,636) // Frame (l,t,r,b)
	kTrue, 
	kTrue, // Visible, Enabled
	kXPGUIUpdateFormeDialogTitleKey, // Dialog name
	{
		StaticTextWidget 
		( 
			0, 
			kSysStaticTextPMRsrcId, // WidgetId, RsrcId
			kBindNone, 
			Frame(4,9,104,29) // Frame left, top, right, bottom
			kTrue, 
			kTrue, 
			kAlignLeft, // Visible, Enabled, Alignment
			kEllipsizeEnd, 
			kTrue,
			kXPGUIFormeNameKey, 
			0,  // WidgetID this shortcut is connected to, 0 if none.
		),
		TextEditBoxWidget 
		( 
			kXPGUIFormeNameWidgetID, 
			kSysEditBoxPMRsrcId, // WidgetId, RsrcId
			kBindNone, 
			Frame(109,10,255,30) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			0, // widget id of nudge button
			0, 
			0, // small/large nudge amount
			0, // max num chars( 0 = no limit)
			kFalse, // is read only
			kFalse, // should notify each key stroke
			kFalse, // range checking enabled
			kFalse, // blank entry allowed
			0, 
			0, // upper/lower bounds
			"",  // initial text
		),
		// Tree List
		GenericPanelWithBorderWidget 
		( 
			0, // The Identifier for this Widget
			kPMRsrcID_None, // The Plugin ID
			kBindNone, // Frame binding
			Frame(4,34,255,600)
			kTrue, // Is this visible
			kTrue, 
			"", 
			{
				XPGUIUpdateStyleMatchingViewWidget 
				( 
					kXPGUIUpdateStyleMatchingViewWidgetID, 
					kPMRsrcID_None, // WidgetId, RsrcId
					kBindAll, 
					Frame(4,4,245,560) // Frame
					kTrue, 
					kTrue, // Visible, Enabled
					kTrue, // EraseBeforeDraw
					kInterfacePaletteFill, // InterfaceColor
					"", 
					kFalse, // Display root node
					kFalse, // Use H Scroll bar
					kTrue, // Use V scroll bar
					20, // fVScrollButtonIncrement
					20, // fVThumbScrollIncrement
					20, // fHScrollButtonIncrement
					20, // fHThumbScrollIncrement
					1, // Items selectable, 0 = No Selection, 1 = Single Selection, 2 = Multiple Selection
					kFalse, // Allow children from multiple parents to be selected
					kFalse, // Allow discontiguous selection
					{
					} 
				),
			} 
		),
		DefaultButtonWidget 
		( 
			kOKButtonWidgetID, // WidgetID
			kSysButtonPMRsrcId, // RsrcID
			kBindNone, // Binding
			Frame(34,604,114,624) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			kSDKDefOKButtonApplicationKey,  // Button text
		),
		CancelButtonWidget 
		( 
			kCancelButton_WidgetID, // WidgetID
			kSysButtonPMRsrcId, // RsrcID
			kBindNone, // Binding
			Frame(134,604,214,624) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			kSDKDefCancelButtonApplicationKey, // Button name
			kFalse,  // Change to Reset on option-click.
		),
	} 
};

resource LocaleIndex (kXPGUIUpdateStyleMatchingRsrcID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, 	kXPGUIUpdateStyleMatchingRsrcID + index_enUS
	}
};

resource XPGUIUpdateStyleMatchingNodeWidget (kXPGUIUpdateStyleMatchingRsrcID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUIUpdateStyleMatchingWidgetID, 
	kPMRsrcID_None, // WidgetId, RsrcId
	kBindLeft | kBindRight, // Frame binding
	Frame(2,4,222,24) // Frame (left, top, right, bottom)
	kTrue, 
	kTrue, // Visible, Enabled
	"", // Panel name
	{
		StaticTextWidget 
		( 
			kXPGUIUpdateStyleNameWidgetID, // WidgetId
			kPMRsrcID_None, // RsrcId
			kBindLeft | kBindRight, // Frame binding
			Frame(0,0,376,18) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			kAlignLeft, // Alignment
			kDontEllipsize, // Ellipsize style
			kTrue,
			"", // Text Control Data
			0,  // WidgetId for associated control for shortcut focus
		),
		// Drop down arrow
		DropDownListWidget 
		( 
			kXPGUIUpdateStyleTagListWidgetID, 
			kSysDropDownPMRsrcId, // WidgetId, RsrcId
			kBindAll, // Frame binding
			Frame(152,1,217,17) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			{
				{
				}
			},
		),
	} 
}


/*
// ------------Formes Panel resources.--------------
*/

resource LocaleIndex (kXPGUIFormesPanelResourceID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, 	kXPGUIFormesPanelResourceID + index_enUS
	}
};

/*  Type definition.
*/
type XPGUIFormesPanelWidget(kViewRsrcType) : GenericPalettePanelWidget (ClassID = kXPGUIFormesPanelWidgetBoss)
{
	CPanelMenuData;
	SizePanelDetailController;
}

type XPGUIFormesViewWidget(kViewRsrcType) : TreeViewWidget(ClassID = kXPGUIFormesViewWidgetBoss) 
{};

type XPGUIFormeNodeWidget(kViewRsrcType) : PrimaryResourcePanelWidget(ClassID = kXPGUIFormeNodeWidgetBoss) 
{};

type XPGUIDisplayImageFomePanelWidget(kViewRsrcType) : GenericPanelWidget(ClassID = kXPGUIDisplayImageFormePanelWidgetBoss)
{};


resource XPGUIFormesPanelWidget (kXPGUIFormesPanelResourceID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUIFormesPanelWidgetID, // WidgetId
	kPMRsrcID_None, // RsrcId
	kBindNone, // Frame binding
	Frame(0,0,551,280) // Frame
	kTrue, // Visible
	kTrue, // Enabled
	kTrue, // Erase background
	kInterfacePaletteFill, // Erase to color
	kFalse, // Draw dropshadow
	kXPGUIFormesPanelTitleKey, // Panel name
	{
		StaticTextWidget 
		( 
			0, 
			kPMRsrcID_None, // WidgetId, RsrcId
			kBindRight | kBindTop, // Frame binding
			Frame(179,4,239,19) // Frame
			kTrue, 
			kTrue, 
			kAlignRight, 
			kEllipsizeEnd, // Visible, Enabled
			kTrue,
			kXPGUIClasseurTextKey, // Text
			0,
		),
		TextComboBoxWidget 
		( 
			kXPGUIComboClasseurListWidgetID, 
			kSysDropDownPMRsrcId, // WidgetId, RsrcId
			kBindRight | kBindTop, 
			Frame(249,4,351,21) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			0, // widget id of nudge button
			0, 
			0, // small/large nudge amount
			30, // max num chars( 0 = no limit)
			kFalse, // is read only
			kFalse, // should notify each key stroke
			kFalse, // range checking enabled
			kFalse, // blank entry allowed
			0, 
			0, // upper/lower bounds
			"", 
			{
				{										// initial text
				}
			},
		),
		// Affichage des vignettes des formes XCarton "XPGUIDisplayImagePanelWidget"
		XPGUIDisplayImagePanelWidget 
		( 
			kXPGUIDisplayImageFormePanelWidgetID, // WidgetId
			kPMRsrcID_None, // RsrcId
			kBindTop | kBindBottom | kBindRight, 
			Frame(344,24,545,245) // Frame(left, top, right, bottom)
			kTrue, // Visible
			kTrue, // Enabled
			"", 
			{
			} 
		),
		PanelWithHiliteBorderWidget 
		( 
			0, // widget ID
			kPMRsrcID_None, // PMRsrc ID
			kBindAll, // frame binding
			Frame(0,25,340,245) //  left, top, right, bottom
			kTrue, // visible
			kTrue, // enabled
			"", 
			{
				XPGUIFormesViewWidget 
				( 
					kXPGUIFormesViewWidgetID, 
					kPMRsrcID_None, // WidgetId, RsrcId
					kBindAll, 
					Frame(0,1,339,219) // Frame
					kTrue, 
					kTrue, // Visible, Enabled
					kTrue, // EraseBeforeDraw
					kInterfacePaletteFill, // InterfaceColor
					"", 
					kFalse, // Display root node
					kFalse, // Use H Scroll bar
					kTrue, // Use V scroll bar
					20, // fVScrollButtonIncrement
					20, // fVThumbScrollIncrement
					20, // fHScrollButtonIncrement
					20, // fHThumbScrollIncrement
					1, // Items selectable, 0 = No Selection, 1 = Single Selection, 2 = Multiple Selection
					kFalse, // Allow children from multiple parents to be selected
					kFalse, // Allow discontiguous selection
					{
					} 
				),
			} 
		),
		ButtonWidget 
		( 
			kXPGUIPlaceAutoFormeWidgetID, // WidgetId
			kSysButtonPMRsrcId, 			 // RsrcId
			kBindRight | kBindTop, 			 // Frame binding
			Frame(10, 249, 100, 263) 
			kTrue, 							 // Visible
			kTrue, 							 // Enabled
			kXPGUIPlacementAutoKey,  		 // Button name
		),
				
		RollOverIconButtonWidget 
		( // ADBEIconSuiteButtonView properties
			kXPGUINewFormeWidgetID, // widget ID
			kNewObjectButtonIcon, 
			kApplicationRsrcPluginID, // icon, plugin ID
			kBindRight | kBindBottom, // frame binding
			Frame(229,249,259,263) //  left, top, right, bottom
			kTrue, // visible
			kTrue, // enabled
			kADBEIconSuiteButtonType,
		),
		RollOverIconButtonWidget 
		( // ADBEIconSuiteButtonView properties
			kXPGUIDeleteFormeWidgetID, // widget ID
			kDeleteObjectButtonIcon, 
			kApplicationRsrcPluginID, // icon, plugin ID
			kBindRight | kBindBottom, // frame binding
			Frame(309,249,339,263) //  left, top, right, bottom
			kTrue, // visible
			kTrue, // enabled
			kADBEIconSuiteButtonType,
		),
	//
	}
	kXPGUIFormePopupMenuNameKey
};


resource LocaleIndex (kXPGUIFormeNodeWidgetRsrcID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, 	kXPGUIFormeNodeWidgetRsrcID + index_enUS
	}
};

resource XPGUIFormeNodeWidget (kXPGUIFormeNodeWidgetRsrcID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUIFormeNodeWidgetId, 
	kPMRsrcID_None, // WidgetId, RsrcId
	kBindLeft | kBindRight, // Frame binding
	Frame(0,0,387,20) // Frame (left, top, right, bottom)
	kTrue, 
	kTrue, // Visible, Enabled
	"", // Panel name
	{
		// Drop down arrow
		TreeExpanderWidget 
		( 
			kTreeNodeExpanderWidgetID, // WidgetId
			kTreeBranchCollapsedRsrcID, // RsrcId for collapsed node icon
			kApplicationRsrcPluginID, // RsrcPlugin for collapsed node icon
			kBindLeft, // Frame binding
			Frame(2,4,18,18) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			kTreeBranchExpandedRsrcID, // RsrcId for expanded node icon
			kApplicationRsrcPluginID, // RsrcPlugin for expanded node icon
			kTrue, // Cmd-Click expands/collapses children
			kFalse, // Scroll to show children when expanded
			kIconNoCentering, 
			kIconRaisedLook, // Sets the icon look -- (kIconRaisedLook | kIconFlushLook)
			kFalse,  // Bool integer sets whether the icon draws a well.
		),
		InfoStaticTextWidget 
		( 
			kXPGUIFormeNameWidgetID, // WidgetId
			kPMRsrcID_None, // RsrcId
			kBindLeft | kBindRight, // Frame binding
			Frame(19,0,376,18) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			kAlignLeft, // Alignment
			kDontEllipsize, // Ellipsize style
			kTrue,
			"", // Text Control Data
			0, // WidgetId for associated control for shortcut focus
			kPaletteWindowSystemScriptFontId, 
			kPaletteWindowSystemScriptFontId,
		),
	} 
}

// Tools Tips

resource TipTable(33)
{
	{	
	    kXPGUICreateIncopyWidgetID ,		 kXPGUICreateIncopyTipKey,
	    kXPGUIDeleteAssignmentWidgetID ,	 kXPGUIDeleteAssignmentTipKey,
	    kXPGUIMAJArtButtonWidgetID,			 kXPGUIMAJArtButtonTipKey,
	   kXPGUIAddToAssignmentButtonWidgetID, kXPGUIAddToAssignmentButtonTipKey,
 	}
}


/*
// ------------Order Article Dialog resources.--------------
*/


/*  Dialog LocaleIndex.
*/
resource LocaleIndex (kXPGUIOrderArtDialogResourceID)
{
   kViewRsrcType,
	{
		kWildFS,	k_Wild, kXPGUIOrderArtDialogResourceID + index_enUS
	}
};

/*  Type definition.
*/
type XPGUIOrderArtDialogWidget(kViewRsrcType) : DialogBoss(ClassID = kXPGUIOrderArtDialogBoss)
{
};

/*  Dialog definition.
This view is not localised: therefore, it can reside here.
However, if you wish to localise it, it is recommended to locate it in one of
the localised framework resource files (i.e. SNR_enUS.fr etc.) and
update your Dialog LocaleIndex accordingly.
*/
resource XPGUIOrderArtDialogWidget (kXPGUIOrderArtDialogResourceID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUIOrderArtDialogWidgetID, // WidgetID
	kPMRsrcID_None, // RsrcID
	kBindNone, // Binding
	Frame(5,10,266,301) // Frame (l,t,r,b)
	kTrue, 
	kTrue, // Visible, Enabled
	kXPGUIOrderArtDialogTitleKey, // Dialog name
	{
		StaticTextWidget 
		( 
			0, 
			kSysStaticTextPMRsrcId, // WidgetId, RsrcId
			kBindNone, 
			Frame(15,9,65,29) // Frame left, top, right, bottom
			kTrue, 
			kTrue, 
			kAlignLeft, // Visible, Enabled, Alignment
			kEllipsizeEnd, 
			kTrue,
			kXPGUITopicTextKey, 
			0,
		),
		MultilineTextEditBoxWidget 
		( 
			kXPGUITopicWidgetID, 
			kSysMultilineEditBoxRsrcId, 
			kApplicationRsrcPluginID, // WidgetId, RsrcId
			kBindLeft | kBindRight, 
			Frame(74,9,245,49) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			0, // widget id of nudge button
			0, 
			0, // small/large nudge amount
			0, // max num chars( 0 = no limit)
			kFalse, // is read only
			kFalse, // should notify each key stroke
			kFalse, // range checking enabled
			kFalse, // blank entry allowed
			0, 
			0, // upper/lower bounds
			"",  // initial text
		),
		StaticTextWidget 
		( 
			0, 
			kSysStaticTextPMRsrcId, // WidgetId, RsrcId
			kBindNone, 
			Frame(15,59,96,79) // Frame left, top, right, bottom
			kTrue, 
			kTrue, 
			kAlignLeft, // Visible, Enabled, Alignment
			kEllipsizeEnd, 
			kTrue,
			kXPGUIRecipientTextKey, 
			0,
		),
		XPGUIDropDownListWidget 
		( 
			kXPGUIRecipientListWidgetID, 
			kSysDropDownPMRsrcId, // WidgetId, RsrcId
			kBindLeft | kBindRight, // Frame binding
			Frame(104,59,244,79) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			{
				{							    // List Items
				}
			},
		),
		XPGUIDropDownListWidget 
		( 
			kXPGUIFirstFilterWidgetID, 
			kSysDropDownPMRsrcId, // WidgetId, RsrcId
			kBindLeft | kBindRight, // Frame binding
			Frame(104,89,245,109) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			{
				{				// List Items
				}
			},
		),
		XPGUIDropDownListWidget 
		( 
			kXPGUISecondFilterWidgetID, 
			kSysDropDownPMRsrcId, // WidgetId, RsrcId
			kBindLeft | kBindRight, // Frame binding
			Frame(104,119,245,139) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			{
				{				// List Items
				}
			},
		),
		StaticTextWidget 
		( 
			kXPGUINbImagesStaticTextWidgetID, 
			kPMRsrcID_None, 
			kBindNone, 
			Frame(15,179,131,199) // Frame
			kTrue, 
			kTrue, // Visible, Enabled,
			// StaticTextAttributes fields below
			kAlignLeft, // Alignment
			kDontEllipsize, // Ellipsize style
			kTrue,
			kXPGUINbImagesKey, 
			kXPGUINbImagesTextWidgetId,
		),
		IntEditBoxWidget 
		( 
			kXPGUINbImagesTextWidgetId, // WidgetId,
			kSysEditBoxRsrcId, 
			kXPGUIPluginID, // RsrcId
			kBindNone, // Frame binding
			Frame(154,179,190,199) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			kXPGUINbImagesNudgeWidgetId, // widget id of nudge button
			1, 
			10, // small/large nudge amount
			3, // max num chars( 0 = no limit)
			kFalse, // is read only
			kFalse, // should notify each key stroke
			kTrue, // range checking enabled
			kFalse, // blank entry allowed
			20, 
			0, // upper/lower bounds
			"0",  // initial value
		),
		NudgeControlWidget 
		( 
			kXPGUINbImagesNudgeWidgetId, 
			kPMRsrcID_None, 
			kBindNone, // Frame binding
			Frame(139,179,156,199) // Frame
			kTrue, 
			kTrue,  // Visible, Enabled
		),
		
		DefaultButtonWidget 
		( 
			kOKButtonWidgetID, // WidgetID
			kSysButtonPMRsrcId, // RsrcID
			kBindNone, // Binding
			Frame(144,259,224,280) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			kSDKDefOKButtonApplicationKey,  // Button text
		),
		CancelButtonWidget 
		( 
			kCancelButton_WidgetID, // WidgetID
			kSysButtonPMRsrcId, // RsrcID
			kBindNone, // Binding
			Frame(44,259,124,280) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			kSDKDefCancelButtonApplicationKey, // Button name
			kTrue,  // Change to Reset on option-click.
		),
		StaticTextWidget 
		( 
			0, 
			kSysStaticTextPMRsrcId, // WidgetId, RsrcId
			kBindNone, 
			Frame(15,89,96,109) // Frame left, top, right, bottom
			kTrue, 
			kTrue, 
			kAlignLeft, // Visible, Enabled, Alignment
			kEllipsizeEnd, 
			kTrue,
			kXPGUIRubriqueTextKey, 
			0,
		),
		StaticTextWidget 
		( 
			0, 
			kSysStaticTextPMRsrcId, // WidgetId, RsrcId
			kBindNone, 
			Frame(15,119,96,139) // Frame left, top, right, bottom
			kTrue, 
			kTrue, 
			kAlignLeft, // Visible, Enabled, Alignment
			kEllipsizeEnd, 
			kTrue,
			kXPGUISsRubriqueTextKey, 
			0,
		),
		IntEditBoxWidget 
		( 
			kXPGUICalibrageTextWidgetId, // WidgetId,
			kSysEditBoxRsrcId, 
			kXPGUIPluginID, // RsrcId
			kBindNone, // Frame binding
			Frame(104,149,245,169) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			0, // widget id of nudge button
			1, 
			10, // small/large nudge amount
			6, // max num chars( 0 = no limit)
			kFalse, // is read only
			kFalse, // should notify each key stroke
			kTrue, // range checking enabled
			kFalse, // blank entry allowed
			999999, 
			0, // upper/lower bounds
			"0",  // initial value
		),
		StaticTextWidget 
		( 
			kXPGUICalibrageStaticTextWidgetID, 
			kPMRsrcID_None, 
			kBindNone, 
			Frame(15,149,96,169) // Frame
			kTrue, 
			kTrue, // Visible, Enabled,
			// StaticTextAttributes fields below
			kAlignLeft, // Alignment
			kDontEllipsize, // Ellipsize style
			kTrue,
			kXPGUICalibrageKey, 
			kXPGUICalibrageStaticTextWidgetID,
		),
	} 
}

/*
// ------------Matching Styles Dialog resources.--------------
*/

resource LocaleIndex (kXPGUIStyleMatchingDialogResourceID)
{
    kViewRsrcType,
	{
		kWildFS,	k_Wild, kXPGUIStyleMatchingDialogResourceID + index_enUS
	}
};

type XPGUIStyleMatchingViewWidget(kViewRsrcType) : TreeViewWidget(ClassID = kXPGUIStyleMatchingWidgetBoss) 
{
};

type XPGUIStyleMatchingNodeWidget(kViewRsrcType) : PrimaryResourcePanelWidget(ClassID = kXPGUIStyleMatchingNodeWidgetBoss) 
{
};


type XPGUIStyleMatchingDialogWidget(kViewRsrcType) : DialogBoss(ClassID = kXPGUIStyleMatchingDialogBoss)
{
};

resource XPGUIStyleMatchingDialogWidget (kXPGUIStyleMatchingDialogResourceID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUIStyleMatchingDialogResourceID, // WidgetID
	kPMRsrcID_None, // RsrcID
	kBindNone, // Binding
	Frame(5,5,251,541) // Frame (l,t,r,b)
	kTrue, 
	kTrue, // Visible, Enabled
	kXPGUIMatchingStylesTextKey, // Dialog name
	{
		DefaultButtonWidget 
		( 
			kOKButtonWidgetID, // WidgetID
			kSysButtonPMRsrcId, // RsrcID
			kBindNone, // Binding
			Frame(134,504,214,525) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			kSDKDefOKButtonApplicationKey,  // Button text
		),
		CancelButtonWidget 
		( 
			kCancelButton_WidgetID, // WidgetID
			kSysButtonPMRsrcId, // RsrcID
			kBindNone, // Binding
			Frame(24,504,104,525) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			kSDKDefCancelButtonApplicationKey, // Button name
			kTrue,  // Change to Reset on option-click.
		),
		GenericPanelWithBorderWidget 
		( 
			0, // The Identifier for this Widget
			kPMRsrcID_None, // The Plugin ID
			kBindNone, // Frame binding
			Frame(4,4,240,500) 
			kTrue, // Is this visible
			kTrue, 
			"", 
			{
				XPGUIStyleMatchingViewWidget 
				( 
					kXPGUIStyleMatchingViewWidgetID, 
					kPMRsrcID_None, // WidgetId, RsrcId
					kBindAll, 
					Frame(4,4,230,490) // Frame
					kTrue, 
					kTrue, // Visible, Enabled
					kFalse, // EraseBeforeDraw
					kInterfacePaletteFill, // InterfaceColor
					"", 
					kFalse, // Display root node
					kFalse, // Use H Scroll bar
					kTrue, // Use V scroll bar
					20, // fVScrollButtonIncrement
					20, // fVThumbScrollIncrement
					20, // fHScrollButtonIncrement
					20, // fHThumbScrollIncrement
					1, // Items selectable, 0 = No Selection, 1 = Single Selection, 2 = Multiple Selection
					kFalse, // Allow children from multiple parents to be selected
					kFalse, // Allow discontiguous selection
					{
					} 
				),
			} 
		),
	} 
}



resource LocaleIndex (kXPGUIStyleMatchingWidgetRsrcID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, 	kXPGUIStyleMatchingWidgetRsrcID + index_enUS
	}
};

resource XPGUIStyleMatchingNodeWidget (kXPGUIStyleMatchingWidgetRsrcID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUIStyleMatchingWidgetID, 
	kPMRsrcID_None, // WidgetId, RsrcId
	kBindLeft | kBindRight, // Frame binding
	Frame(2,4,222,24) // Frame (left, top, right, bottom)
	kTrue, 
	kTrue, // Visible, Enabled
	"", // Panel name
	{
		StaticTextWidget 
		( 
			kXPGUIStyleNameWidgetID, // WidgetId
			kPMRsrcID_None, // RsrcId
			kBindLeft | kBindRight, // Frame binding
			Frame(0,0,376,18) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			kAlignLeft, // Alignment
			kDontEllipsize, // Ellipsize style
			kTrue,
			"", // Text Control Data
			0,  // WidgetId for associated control for shortcut focus
		),
		// Drop down arrow
		DropDownListWidget 
		( 
			kXPGUIStyleTagListWidgetID, 
			kSysDropDownPMRsrcId, // WidgetId, RsrcId
			kBindAll, // Frame binding
			Frame(147,1,217,17) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			{
				{
				}
			},
		),
	} 
}






/*
// ------------Add items to Article Dialog resources.--------------
*/


/*  Dialog LocaleIndex.
*/
resource LocaleIndex (kXPGUIAddToStorySubjectDialogResourceID)
{
   kViewRsrcType,
	{
		kWildFS,	k_Wild, kXPGUIAddToStorySubjectDialogResourceID + index_enUS
	}
};

/*  Type definition.
*/
type XPGUIAddToArtDialogWidget(kViewRsrcType) : DialogBoss(ClassID = kXPGUIAddToArtDialogBoss)
{
};

/*  Dialog definition.
This view is not localised: therefore, it can reside here.
However, if you wish to localise it, it is recommended to locate it in one of
the localised framework resource files (i.e. SNR_enUS.fr etc.) and
update your Dialog LocaleIndex accordingly.
*/
resource XPGUIAddToArtDialogWidget (kXPGUIAddToStorySubjectDialogResourceID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUIAddToArtDialogWidget, // WidgetID
	kPMRsrcID_None, // RsrcID
	kBindNone, // Binding
	Frame(5, 5, 316, 110) // Frame (l,t,r,b)
	kTrue, 
	kTrue, // Visible, Enabled
	kXPGUIAddToArtDialogTitleKey, // Dialog name
	{
	
		StaticTextWidget 
		( 
			0, 
			kSysStaticTextPMRsrcId, // WidgetId, RsrcId
			kBindNone, 
			Frame(15, 10, 98, 30) // Frame left, top, right, bottom
			kTrue, 
			kTrue, 
			kAlignLeft, // Visible, Enabled, Alignment
			kEllipsizeEnd, 
			kTrue,
			kXPGUIStoryTypeTextKey, 
			0,
		),
		
		ClusterPanelWidget 
		( 
			0, // The Identifier for this Widget
			kPMRsrcID_None, // The Plugin ID
			kBindNone, // Frame binding
			Frame(100, 4, 300, 35) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			"", 
			{
				RadioButtonWidget 
				( 
					kXPGUIRadioInCopyStoryWidgetID, // The Identifier for this Widget
					kSysRadioButtonPMRsrcId,  // The Plugin ID
					kBindNone,				  // Frame binding
					Frame(10, 5, 65, 25) 
					kTrue,					  // Is this visible
					kTrue,					  // Is this enabled
					kXPGUIInCopyStoryTypeKey, // The String value
				),
				
				RadioButtonWidget 
				( 
					kXPGUIRadioPlacedStoryWidgetID,
					// The Identifier for this Widget
					kSysRadioButtonPMRsrcId,	// The Plugin ID
					kBindNone,					// Frame binding
					Frame(90, 5, 145, 25) 
					kTrue,						// Is this visible
					kTrue,						// Is this enabled
					kXPGUIPlacedStoryTypeKey,	// The String value
				),				
			} 
		),
		
		StaticTextWidget 
		( 
			0, 
			kSysStaticTextPMRsrcId, // WidgetId, RsrcId
			kBindNone, 
			Frame(15, 45, 98, 65) // Frame left, top, right, bottom
			kTrue, 
			kTrue, 
			kAlignLeft, // Visible, Enabled, Alignment
			kEllipsizeEnd, 
			kTrue,
			kXPGUIListAssignmentsTextKey, 
			0,
		),
		XPGUIDropDownListWidget 
		( 
			kXPGUIAssignmentListWidgetID, 
			kSysDropDownPMRsrcId, // WidgetId, RsrcId
			kBindLeft | kBindRight, // Frame binding
			Frame(100, 45, 306, 65) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			{
				{							    // List Items
				}
			},
		),
		
		DefaultButtonWidget 
		( 
			kOKButtonWidgetID, // WidgetID
			kSysButtonPMRsrcId, // RsrcID
			kBindNone, // Binding
			Frame(160, 80, 240, 101) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			kSDKDefOKButtonApplicationKey,  // Button text
		),
		CancelButtonWidget 
		( 
			kCancelButton_WidgetID, // WidgetID
			kSysButtonPMRsrcId, // RsrcID
			kBindNone, // Binding
			Frame(60, 80, 140, 101) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			kSDKDefCancelButtonApplicationKey, // Button name
			kTrue,  // Change to Reset on option-click.
		),
	} 
}

/*
// ------------Articles Panel resources.--------------
*/

resource LocaleIndex (kXPGUIArticlePanelResourceID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, 	kXPGUIArticlePanelResourceID + index_enUS
	}
};

/*  Type definition.
*/


type XPGUIArticlePanelWidget(kViewRsrcType) : GenericPalettePanelWidget (ClassID = kXPGUIArticlePanelWidgetBoss)
{
	CPanelMenuData;
	SizePanelDetailController;
}
type XPGUIArticleViewWidget(kViewRsrcType) : TreeViewWidget(ClassID = kXPGUIArticleViewWidgetBoss) 
{};

type XPGUIArticleNodeWidget(kViewRsrcType) : PrimaryResourcePanelWidget(ClassID = kXPGUIArticleNodeWidgetBoss) 
{};
resource PNGA(kXPGUIToggleIconResourceID) "icon_toggle.png"



resource XPGUIArticlePanelWidget (kXPGUIArticlePanelResourceID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUIArticlePanelWidgetID, // WidgetId
	kPMRsrcID_None, // RsrcId
	kBindNone, // Frame binding
	Frame(5,5,401,360) // Frame
	kTrue, // Visible
	kTrue, // Enabled
	kTrue, // Erase background
	kInterfacePaletteFill, // Erase to color
	kFalse, // Draw dropshadow
	kXPGUIArticlePanelTitleKey, // Panel name
	{
		RollOverIconButtonWidget						//Bouton Ajouter
		( 
			kXPGUICreateIncopyWidgetID, // widget ID
			kXPGUITextNewIconResourceID, // resource ID
			kXPGUIPluginID, // plugin ID
			kBindNone, // frame binding
			Frame(9,4,45,40) // left, top, right, bottom
			kTrue, 
			kTrue, // visible, enabled
			kADBEIconSuiteButtonType,
		),
		StaticTextWidget								//Libelle bouton ajouter
		( 
			0, // The Identifier for this Widget
			kSysStaticTextPMRsrcId, // The Plugin ID
			kBindLeft | kBindTop, // Frame binding
			Frame(4,44,50,59) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignCenter, // The alignment of this field
			kEllipsizeEnd, // Where to ellipsize the string if the size is larger than its frame
			kTrue,
			kXPGUIAddLabelKey, // The String value
			0,  // The Widget ID for associated control for shortcut focus
		),
		RollOverIconButtonWidget						//bouton Ajouter a
		( 
			kXPGUIAddToAssignmentButtonWidgetID, // widget ID
			kXPGUITextAddToAssignmentIconResourceID, // resource ID
			kXPGUIPluginID, // plugin ID
			kBindNone, // frame binding
			Frame(64,4,100,40) // left, top, right, bottom
			kTrue, 
			kTrue, // visible, enabled
			kADBEIconSuiteButtonType,
		),
		StaticTextWidget								//Libelle bouton ajouter a
		( 
			0, // The Identifier for this Widget		
			kSysStaticTextPMRsrcId, // The Plugin ID
			kBindLeft | kBindTop, // Frame binding
			Frame(59,44,105,60) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignCenter, // The alignment of this field
			kEllipsizeEnd, // Where to ellipsize the string if the size is larger than its frame
			kTrue,
			kXPGUIAddToAssignmentKey, // The String value
			0,  // The Widget ID for associated control for shortcut focus
		),
		RollOverIconButtonWidget						//bouton Effacer
		( 
			kXPGUIDeleteAssignmentWidgetID, // WidgetId
			kXPGUITextDeleteIconResourceID, // RsrcId
			kXPGUIPluginID, 
			kBindNone, // Frame binding
			Frame(119,4,155,40) 
			kTrue, // Visible
			kTrue, // Enabled
			kADBEIconSuiteButtonType,
		),
		StaticTextWidget								//libelle bouton effacer
		( 
			0, // The Identifier for this Widget
			kSysStaticTextPMRsrcId, // The Plugin ID
			kBindLeft | kBindTop, // Frame binding
			Frame(114,44,160,59) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignCenter, // The alignment of this field
			kEllipsizeEnd, // Where to ellipsize the string if the size is larger than its frame
			kTrue,
			kXPGUIDeleteLabelTextKey, // The String value
			0,  // The Widget ID for associated control for shortcut focus
		),
		RollOverIconButtonWidget						//bouton MAJ
		( 
			kXPGUIMAJArtButtonWidgetID, // WidgetId
			kXPGUITextUpdateIconResourceID, // RsrcId
			kXPGUIPluginID, 
			kBindNone, // Frame binding
			Frame(174,4,210,40) 
			kTrue, // Visible
			kTrue, // Enabled
			kADBEIconSuiteButtonType,
		),
		StaticTextWidget								//Libelle bouton MAJ
		( 
			0, // The Identifier for this Widget
			kSysStaticTextPMRsrcId, // The Plugin ID
			kBindLeft | kBindTop, // Frame binding
			Frame(169,44,215,59) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignCenter, // The alignment of this field
			kEllipsizeEnd, // Where to ellipsize the string if the size is larger than its frame
			kTrue,
			kXPGUIUpdateLabelKey, // The String value
			0,  // The Widget ID for associated control for shortcut focus
		),
		
		StaticTextWidget								//Libelle utilisateur courant
		( 
			kXPGUICurrentUserWidgetID, // The Identifier for this Widget
			kSysStaticTextPMRsrcId, // The Plugin ID
			kBindLeft | kBindTop, // Frame binding
			Frame(280, 44, 390, 51) 
			kTrue,			// Is this visible
			kTrue,			// Is this enabled
			kAlignLeft,		// The alignment of this field
			kEllipsizeEnd,	// Where to ellipsize the string if the size is larger than its frame
			kTrue,
			"",				// The String value
			0,				// The Widget ID for associated control for shortcut focus
		),
		
		StaticTextWidget								//libelle Titre + parution de la page
		( 
			kXPGUIInfoPageWidgetID, // The Identifier for this Widget
			kSysStaticTextPMRsrcId, // The Plugin ID
			kBindLeft | kBindTop,	// Frame binding
			Frame(280, 4, 390, 40) 
			kTrue,			// Is this visible
			kTrue,			// Is this enabled
			kAlignLeft,		// The alignment of this field
			kEllipsizeEnd,	// Where to ellipsize the string if the size is larger than its frame
			kTrue,
			"",				// The String value
			0,				// The Widget ID for associated control for shortcut focus
		),

		GenericPanelWithBorderWidget					//Zone avec les cases a cocher
		( 
			0, // widget ID
			kPMRsrcID_None, // PMRsrc ID
			kBindNone, // frame binding
			Frame(179, 239, 390, 350) //  left, top, right, bottom
			kTrue, // visible
			kTrue, // enabled
			"", 
			{				
				RollOverIconButtonWidget				
				( 
					kXPGUIRefreshFormesAdornmentWidgetID,	// widget ID
					kXPGUIToggleIconResourceID,				// resource ID
					kXPGUIPluginID,							// plugin ID
					kBindNone,								// frame binding
					Frame(5, 5, 25, 23)					// left, top, right, bottom
					kTrue, 
					kTrue,									// visible, enabled
					kADBEIconSuiteButtonType,				// associated widget
				),
				
				CheckBoxWidget 
				( 
					kXPGUIDisplayFormesWidgetID, // The Identifier for this Widget
					kSysCheckBoxPMRsrcId, // The Plugin ID
					kBindAll, // Frame binding
					Frame(30, 5, 205, 23) 
					kTrue, // Is this visible
					kTrue, // Is this enabled
					kAlignLeft, // The alignment of the parent widget
					kXPGUIDisplayFormesKey,  // The String value
				),
				
				RollOverIconButtonWidget 
				( 
					kXPGUIRefreshAdornmentWidgetID, // widget ID
					kXPGUIToggleIconResourceID, // resource ID
					kXPGUIPluginID, // plugin ID
					kBindNone, // frame binding
					Frame(5, 30, 25, 48) // left, top, right, bottom
					kTrue, 
					kTrue, // visible, enabled
					kADBEIconSuiteButtonType,  // associated widget
				),
				
				CheckBoxWidget 
				( 
					kXPGUIDisplayStoryStatesWidgetID, // The Identifier for this Widget
					kSysCheckBoxPMRsrcId,			  // The Plugin ID
					kBindAll,					      // Frame binding
					Frame(30, 30, 205, 48) 
					kTrue,							  // Is this visible
					kTrue,							  // Is this enabled
					kAlignLeft,						  // The alignment of the parent widget
					kXPGUIDisplayStoryStatesKey,	  // The String value
				),
				ButtonWidget 
				( 
					kXPGUIChangeStylesWidgetID, // WidgetID
					kSysButtonPMRsrcId, // RsrcID
					kBindNone, // Binding
					Frame(10, 55, 195, 73) // Frame (l,t,r,b)
					kTrue, 
					kTrue, // Visible, Enabled
					kXPGUIChangeStylesResaKey,  // Button text
				),
			} 
		),
		
		GenericPanelWithBorderWidget					//zone contenant la liste des articles
		( 
			0, // The Identifier for this Widget
			kPMRsrcID_None, // The Plugin ID
			kBindNone, // Frame binding
			Frame(4,104,390,230) 
			kTrue, // Is this visible
			kTrue, 
			"", 
			{
				XPGUIArticleViewWidget 
				( 
					kXPGUIArticleViewWidgetID, 
					kPMRsrcID_None, // WidgetId, RsrcId
					kBindAll, 
					Frame(4,4,380,120) // Frame
					kTrue, 
					kTrue, // Visible, Enabled
					kTrue, // EraseBeforeDraw
					kInterfacePaletteFill, // InterfaceColor
					"", 
					kFalse, // Display root node
					kFalse, // Use H Scroll bar
					kTrue, // Use V scroll bar
					20, // fVScrollButtonIncrement
					20, // fVThumbScrollIncrement
					20, // fHScrollButtonIncrement
					20, // fHThumbScrollIncrement
					1, // Items selectable, 0 = No Selection, 1 = Single Selection, 2 = Multiple Selection
					kFalse, // Allow children from multiple parents to be selected
					kFalse, // Allow discontiguous selection
					{
					} 
				),
			} 
		),
		XPGUIDropDownListWidget										//Liste des parutions
		( 
			kXPGUIParutionListWidgetID, // The Identifier for this Widget
			kSysDropDownPMRsrcId, // The Plugin ID
			kBindAll, // Frame binding
			Frame(4,74,115,91) 
			kTrue, // Is this visible
			kTrue, 
			{
				{
					//array
				}
			},
		),
		XPGUIDropDownListWidget										//Liste des sections
		( 
			kXPGUISectionListWidgetID, // The Identifier for this Widget
			kSysDropDownPMRsrcId, // The Plugin ID
			kBindAll, // Frame binding
			Frame(134,74,260,91) 
			kTrue, // Is this visible
			kTrue, 
			{
				{
					//array
				}
			},
		),
		XPGUIDropDownListWidget										//liste des sous sections
		( 
			kXPGUISsSectionListWidgetID, // The Identifier for this Widget
			kSysDropDownPMRsrcId, // The Plugin ID
			kBindAll, // Frame binding
			Frame(279,74,390,91) 
			kTrue, // Is this visible
			kTrue, 
			{
				{
					//array
				}
			},
		),
		GenericPanelWithBorderWidget 
		( 
			0, // widget ID
			kPMRsrcID_None, // PMRsrc ID
			kBindNone, // frame binding
			Frame(4, 238, 165, 350) //  left, top, right, bottom
			kTrue, // visible
			kTrue, // enabled
			"", 
			{
				StaticTextWidget 
				( 
					0, // The Identifier for this Widget
					kSysStaticTextPMRsrcId, // The Plugin ID
					kBindLeft | kBindTop, // Frame binding
					Frame(2, 2, 42, 18) 
					kTrue, // Is this visible
					kTrue, // Is this enabled
					kAlignCenter, // The alignment of this field
					kEllipsizeEnd, // Where to ellipsize the string if the size is larger than its frame
					kTrue,
					kXPGUINbCharsTextKey, // The String value
					0,  // The Widget ID for associated control for shortcut focus
				),
				
				StaticTextWidget						//nb de signes
				( 
					kXPGUIArticleNbSignesWidgetID, // The Identifier for this Widget
					kSysStaticTextPMRsrcId, // The Plugin ID
					kBindLeft | kBindTop, // Frame binding
					Frame(42, 2, 92, 18) 
					kTrue, // Is this visible
					kTrue, // Is this enabled
					kAlignLeft, // The alignment of this field
					kEllipsizeEnd, // Where to ellipsize the string if the size is larger than its frame
					kTrue
					"", // The String value
					0,  // The Widget ID for associated control for shortcut focus
				),
				
				StaticMultiLineTextWidget				//preview de l'article
				( 
					kXPGUIArticlePreviewWidgetID, 
					kPMRsrcID_None, 
					kBindAll, // Frame binding
					Frame(0, 18, 160, 100) // Frame
					kTrue, 
					kTrue, 
					kAlignLeft, 
					kEllipsizeEnd, 
					kTrue,
					0, // fScrollBarWidgetID
					kPaletteWindowSystemScriptFontId, 
					2, // fNumPixelsBetweenLines
					5, 
					2, // Insets
					"",
				),
				
				SeparatorWidget 
				( 
					0, // The Identifier for this Widget
					kPMRsrcID_None, // The Resource I
					kBindNone, // Frame binding
					Frame(1, 18, 161, 22) 
					kTrue, // Is this visible
					kTrue,  // Is this enabled
				),
			} 
		),
		SeparatorWidget									//Separateur entre les boutons et les menus deroulants
		( 
			0, // The Identifier for this Widget
			kPMRsrcID_None, // The Plugin ID
			kBindNone, // Frame binding
			Frame(4,64,390,70) 
			kTrue, // Is this visible
			kTrue,  // Is this enabled
		),
		SeparatorWidget									//separateur entre les boutons et le titre/paru/login
		( 
			0, // The Identifier for this Widget
			kPMRsrcID_None, // The Plugin ID
			kBindNone, // Frame binding
			Frame(250,4,255,60) 
			kTrue, // Is this visible
			kTrue,  // Is this enabled
		),

	}
	kXPGUIInternalPopupMenuNameKey,  
}

resource LocaleIndex (kXPGUIArticleNodeWidgetRsrcID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, 	kXPGUIArticleNodeWidgetRsrcID + index_enUS 
	}
};


resource XPGUIArticleNodeWidget (kXPGUIArticleNodeWidgetRsrcID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUIArticleNodeWidgetId, 
	kPMRsrcID_None, // WidgetId, RsrcId
	kBindLeft | kBindRight, // Frame binding
	Frame(0,0,205,20) // Frame (left, top, right, bottom)
	kTrue, 
	kTrue, // Visible, Enabled
	"", // Panel name
	{
		// Drop down arrow
		TreeExpanderWidget 
		( 
			kTreeNodeExpanderWidgetID, // WidgetId
			kTreeBranchCollapsedRsrcID, // RsrcId for collapsed node icon
			kApplicationRsrcPluginID, // RsrcPlugin for collapsed node icon
			kBindLeft, // Frame binding
			Frame(2,4,18,18) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			kTreeBranchExpandedRsrcID, // RsrcId for expanded node icon
			kApplicationRsrcPluginID, // RsrcPlugin for expanded node icon
			kTrue, // Cmd-Click expands/collapses children
			kFalse, // Scroll to show children when expanded
			kIconNoCentering, 
			kIconRaisedLook, // Sets the icon look -- (kIconRaisedLook | kIconFlushLook)
			kFalse,  // Bool integer sets whether the icon draws a well.
		),
		IconSuiteWidget 
		( 
			kXPGUIArticleIconWidgetId, // WidgetId,
			kPMRsrcID_None, 
			kBindLeft, // Frame binding
			Frame(0,0,18,18) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			kIconCentering, // (kIconNoCentering, kIconHorizontalCentering, kIconVerticalCentering or kIconCentering)
			// Centering value from IconStyleDefs.h
			kIconFlushLook, // Sets the icon look -- (kIconRaisedLook | kIconFlushLook)
			kFalse, //  bool, draw Well..
			0,  // WidgetId for associated control for shortcut focus
		),
		StaticTextWidget 
		( 
			kXPGUITextSubjectWidgetID, // widget ID
			kSysStaticTextPMRsrcId, // PMRsrc ID
			kBindNone, // frame binding
			Frame(49,2,305,16) // left, top, right, bottom
			kTrue, 
			kTrue, // visible,  enabled
			kAlignLeft, // Alignment
			kEllipsizeEnd, // Ellipsize style
			kTrue,
			"", // control label
			0,  // associated widget ID
		),
		UIColorSwatchWidget /* portage CS7	UIColorPickerWidget */
		( 
			kXPGUITextStatusWidgetID, // The Identifier for this Widget
			kPMRsrcID_None, // The Resource ID
			kBindNone, // Frame binding
			Frame(19,2,34,16) 
			kTrue, // Is this visible
			kFalse, // Is this enabled
			// portageCS7 0,
		),

		IconSuiteWidget 
		( 
			kXPGUITextPictureIconWidgetID, // WidgetId,
			kPMRsrcID_None, 
			kBindRight, // Frame binding
			Frame(184,0,202,18) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			kIconCentering, // (kIconNoCentering, kIconHorizontalCentering, kIconVerticalCentering or kIconCentering)
			// Centering value from IconStyleDefs.h
			kIconFlushLook, // Sets the icon look -- (kIconRaisedLook | kIconFlushLook)
			kFalse, //  bool, draw Well..
			0,  // WidgetId for associated control for shortcut focus
		),
		
		InfoStaticTextIntWidget 
		( 
			kXPGUITextPictureCountWidgetID, // The Identifier for this Widget
			kPMRsrcID_None, // The Plugin ID
			kBindRight, // Frame binding
			Frame(164,0,182,18) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignRight, // The alignment of this field
			kEllipsizeEnd, // Where to ellipsize the string if the size is larger than its frame
			kTrue,
			"", // The String value
			0, // The Widget ID for associated control for shortcut focus
			kDialogWindowSystemScriptFontId, 
			kDialogWindowSystemScriptHiliteFontId,
		),	
		
		IconSuiteWidget 
		( 
			kXPGUITextPlacedIconWidgetID, // WidgetId,
			kPMRsrcID_None, 
			kBindRight, // Frame binding
			Frame(144,0,162,18) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			kIconCentering, // (kIconNoCentering, kIconHorizontalCentering, kIconVerticalCentering or kIconCentering)
			// Centering value from IconStyleDefs.h
			kIconFlushLook, // Sets the icon look -- (kIconRaisedLook | kIconFlushLook)
			kFalse, //  bool, draw Well..
			0,  // WidgetId for associated control for shortcut focus
		),
	} 
}

/*
// ------------XRail Images Panel resources.--------------
*/
resource LocaleIndex (kXPGUIXRailImagesPanelResourceID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, 	kXPGUIXRailImagesPanelResourceID + index_enUS
	}
};

/*  Type definition.
*/
type XPGUIXRailImagesPanelWidget(kViewRsrcType) : GenericPalettePanelWidget (ClassID = kXPGUIXRailImagesPanelWidgetBoss)
{
	SizePanelDetailController;
}

/*
// Panel definition.
// This view is not localized: therefore, it can reside here.
// However, if you wish to localize it, it is recommended to
// locate it in one of the localized framework resource files
// (i.e. BscSlDlg_enUS.fr etc.) and update your Panel
// LocaleIndex accordingly.
*/
resource XPGUIXRailImagesPanelWidget (kXPGUIXRailImagesPanelResourceID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUIXRailImagesPanelWidgetID, // WidgetId
	kPMRsrcID_None, // RsrcId
	kBindNone, // Frame binding
	Frame(0,0,529,240) // Frame
	kTrue, 
	kTrue, // Enabled
	kTrue, // Erase background
	kInterfacePaletteFill, // Erase to color
	kFalse, // Draw dropshadow
	kXPGUIImagesPanelTitleKey, // Panel name
	{
		XPGUIDisplayImagePanelWidget 
		( 
			kXPGUIDisplayImagePanelWidgetID, // WidgetId
			kPMRsrcID_None, // RsrcId
			kBindTop | kBindBottom | kBindRight, 
			Frame(400,10,525,145) // Frame
			kTrue, // Visible
			kTrue, // Enabled
			"", 
			{
			} 
		),
		CheckBoxWidget 
		( 
			kXPGUIBlackWhiteWidgetID, // WidgetId
			kSysCheckBoxPMRsrcId, // RsrcId
			kBindBottom | kBindRight, 
			Frame(424,149,510,166) // Frame
			kTrue, // Visible
			kTrue, // Enabled
			kAlignLeft, // Alignment
			kXPGUIBlackWhiteKey,  // Initial text
		),
		StaticTextWidget 
		( 
			kXPGUIImageIndexWidgetID, // The Identifier for this Widget
			kSysStaticTextPMRsrcId, // The Plugin ID
			kBindNone, // Frame binding
			Frame(4,199,55,214) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignRight, // The alignment of this field
			kEllipsizeEnd, // Where to ellipsize the string if the size is larger than its frame
			kTrue,
			kXPGUIImagesIndexKey, // The String value
			0,  // The Widget ID for associated control for shortcut focus
		),
		DropDownListWidget 
		( 
			kXPGUIImageChangeTypeWidgetID, // The Identifier for this Widget
			kSysDropDownPMRsrcId, // The Plugin ID
			kBindLeft | kBindRight, // Frame binding
			Frame(64,199,250,214) // Frame (l,t,r,b)
			kTrue, // Is this visible
			kTrue, 
			{{                    // List Items
                kXPGUINoneTextKey,
                kXPGUIArticleTypeKey,
                kXPGUIPhotoTypeKey,
                kXPGUICreditKey,
                kXPGUILegendKey,
				kXPGUIkFixedContentKey,
            }
			},
		),
		TextEditBoxWidget 
		( 
			kXPGUIImageChangeIndexWidgetID, // The Identifier for this Widget
			kSysEditBoxPMRsrcId, // The Plugin ID
			kBindBottom | kBindLeft, // Frame binding
			Frame(260,199,290,214) //  left, top, right, bottom
			kTrue, // Is this visible
			kTrue, // Is this enabled
			0, // The WidgetID for the nudge button
			0, // A small nudge amount
			0, // A large nudge amount
			0, // The maximum number of characters
			kFalse, // integer readOnly value
			kFalse, // Notify on key stroke
			kFalse, // Enable range checking
			kFalse, // Allow blank entry
			0, // The upper limit
			0, // The lower limit
			"",  // The String value
		),
		ButtonWidget 
		( 
			kXPGUIImageChangeIndexBtnWidgetID, // WidgetID
			kSysButtonPMRsrcId, // RsrcID
			kBindNone, // Binding
			Frame(300,199,350,214) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			kXPGUIkValiderKey,  // Button text
		),
		SeparatorWidget 
		( 
			0, // WidgetId
			kPMRsrcID_None, // RsrcId
			kBindLeft | kBindRight | kBindBottom, 
			Frame(-1,199,536,200) // Frame
			kFalse, 
			kFalse,  // Visible, Enabled
		),
		InfoStaticTextWidget 
		( 
			kXPGUICurrentNumeroWidgetID, 
			kPMRsrcID_None, // WidgetId, RsrcId
			kBindRight | kBindBottom, // Frame binding
			Frame(324,199,535,200) // Frame
			kTrue, 
			kTrue, 
			kAlignRight, 
			kEllipsizeEnd, // Visible, Enabled
			kTrue,
			"", // Text
			0, 
			kDialogWindowSystemScriptFontId, 
			kDialogWindowSystemScriptHiliteFontId,
		),
		StaticTextWidget 
		( 
			kXPGUICreditLabelWidgetID, // The Identifier for this Widget
			kSysStaticTextPMRsrcId, // The Plugin ID
			kBindBottom | kBindLeft, // Frame binding
			Frame(4,149,55,166) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignLeft, // The alignment of this field
			kEllipsizeEnd, // Where to ellipsize the string if the size is larger than its frame
			kTrue,
			kXPGUICreditKey, // The String value
			0,  // The Widget ID for associated control for shortcut focus
		),
		StaticTextWidget 
		( 
			kXPGUILegendeLabelWidgetID, // The Identifier for this Widget
			kSysStaticTextPMRsrcId, // The Plugin ID
			kBindBottom | kBindLeft, // Frame binding
			Frame(4,174,55,191) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignLeft, // The alignment of this field
			kEllipsizeEnd, // Where to ellipsize the string if the size is larger than its frame
			kTrue,
			kXPGUILegendKey, // The String value
			0,  // The Widget ID for associated control for shortcut focus
		),
		TextEditBoxWidget 
		( 
			kXPGUICreditTextWidgetID, // The Identifier for this Widget
			kSysEditBoxPMRsrcId, // The Plugin ID
			kBindBottom | kBindLeft, // Frame binding
			Frame(64,149,250,166) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			0, // The WidgetID for the nudge button
			0, // A small nudge amount
			0, // A large nudge amount
			0, // The maximum number of characters
			kFalse, // integer readOnly value
			kFalse, // Notify on key stroke
			kFalse, // Enable range checking
			kFalse, // Allow blank entry
			0, // The upper limit
			0, // The lower limit
			"",  // The String value
		),
		TextEditBoxWidget 
		( 
			kXPGUILegendeTextWidgetID, // The Identifier for this Widget
			kSysEditBoxPMRsrcId, // The Plugin ID
			kBindBottom | kBindLeft, // Frame binding
			Frame(64,174,250,191) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			0, // The WidgetID for the nudge button
			0, // A small nudge amount
			0, // A large nudge amount
			0, // The maximum number of characters
			kFalse, // integer readOnly value
			kFalse, // Notify on key stroke
			kFalse, // Enable range checking
			kFalse, // Allow blank entry
			0, // The upper limit
			0, // The lower limit
			"",  // The String value
		),
		GenericPanelWithBorderWidget 
		( 
			0, // The Identifier for this Widget
			kPMRsrcID_None, // The Plugin ID
			kBindAll, // Frame binding
			Frame(4,9,390,145) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			"", 
			{
				XPGUIImagesViewWidget 
				( 
					kXPGUIImagesViewWidgetID, 
					kPMRsrcID_None, // WidgetId, RsrcId
					kBindAll, 
					Frame(4,4,380,130) // Frame
					kTrue, 
					kTrue, // Visible, Enabled
					kTrue, // EraseBeforeDraw
					kInterfacePaletteFill, // InterfaceColor
					"", 
					kFalse, // Display root node
					kFalse, // Use H Scroll bar
					kTrue, // Use V scroll bar
					20, // fVScrollButtonIncrement
					20, // fVThumbScrollIncrement
					20, // fHScrollButtonIncrement
					20, // fHThumbScrollIncrement
					1, // Items selectable, 0 = No Selection, 1 = Single Selection, 2 = Multiple Selection
					kFalse, // Allow children from multiple parents to be selected
					kFalse, // Allow discontiguous selection
					{
					} 
				),
			} 
		),
	} 
};



/*
// ------------Info Cartons Panel resources.--------------
*/
resource LocaleIndex (kXPGUIStatisticsPanelResourceID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, 	kXPGUIStatisticsPanelResourceID + index_enUS
	}
};

/*  Type definition.
*/
type XPGUIStatisticsPanelWidget(kViewRsrcType) : GenericPalettePanelWidget (ClassID = kXPGUIStatisticsPanelWidgetBoss)
{
	SizePanelDetailController;
}





resource XPGUIStatisticsPanelWidget (kXPGUIStatisticsPanelResourceID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUIStatisticsPanelWidgetID, // WidgetId
	kPMRsrcID_None, // RsrcId
	kBindNone, // Frame binding
	Frame(10,15,196,141) // Frame
	kTrue, 
	kTrue, // Enabled
	kTrue, // Erase background
	kInterfacePaletteFill, // Erase to color
	kFalse, // Draw dropshadow
	kXPGUIStatisticsPanelMenuKey, // Panel name
	{
		StaticTextWidget 
		( 
			kXPGUIStatisticsNbCharactersWidgetID, // The Identifier for this Widget
			kSysStaticTextPMRsrcId, // The Plugin ID
			kBindNone, // Frame binding
			Frame(14,14,85,35) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignRight, // The alignment of this field
			kEllipsizeEnd, // Where to ellipsize the string if the size is larger than its frame
			kTrue,
			kXPGUIStatisticsNbCharactersKey, // The String value
			0,  // The Widget ID for associated control for shortcut focus
		),
		StaticTextWidget 
		( 
			kXPGUIStatisticsNbLinesWidgetID, // The Identifier for this Widget
			kSysStaticTextPMRsrcId, // The Plugin ID
			kBindNone, // Frame binding
			Frame(14,39,85,60) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignRight, // The alignment of this field
			kEllipsizeEnd, // Where to ellipsize the string if the size is larger than its frame
			kTrue,
			kXPGUIStatisticsNbLinesKey, // The String value
			0,  // The Widget ID for associated control for shortcut focus
		),
		StaticTextWidget 
		( 
			kXPGUIStatisticsNbWordsValueWidgetID, // The Identifier for this Widget
			kSysStaticTextPMRsrcId, // The Plugin ID
			kBindNone, // Frame binding
			Frame(94,64,170,84) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignLeft, // The alignment of this field
			kEllipsizeEnd, // The String value
			kTrue,
			"", 
			0,  // The Widget ID for associated control for shortcut focus
		),
		StaticTextWidget 
		( 
			kXPGUIStatisticsNbParagraphsWidgetID, // The Identifier for this Widget
			kSysStaticTextPMRsrcId, // The Plugin ID
			kBindNone, // Frame binding
			Frame(14,89,85,109) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignRight, // The alignment of this field
			kEllipsizeEnd, // Where to ellipsize the string if the size is larger than its frame
			kTrue,
			kXPGUIStatisticsNbParagraphsKey, // The String value
			0,  // The Widget ID for associated control for shortcut focus
		),
		StaticTextWidget 
		( 
			kXPGUIStatisticsNbCharactersValueWidgetID, // The Identifier for this Widget
			kSysStaticTextPMRsrcId, // The Plugin ID
			kBindNone, // Frame binding
			Frame(94,14,170,35) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignLeft, // The alignment of this field
			kEllipsizeEnd, // The String value
			kTrue,
			"", 
			0,  // The Widget ID for associated control for shortcut focus
		),
		StaticTextWidget 
		( 
			kXPGUIStatisticsNbLinesValueWidgetID, // The Identifier for this Widget
			kSysStaticTextPMRsrcId, // The Plugin ID
			kBindNone, // Frame binding
			Frame(94,39,170,60) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignLeft, // The alignment of this field
			kEllipsizeEnd, // The String value
			kTrue,
			"", 
			0,  // The Widget ID for associated control for shortcut focus
		),
		StaticTextWidget 
		( 
			kXPGUIStatisticsNbWordsWidgetID, // The Identifier for this Widget
			kSysStaticTextPMRsrcId, // The Plugin ID
			kBindNone, // Frame binding
			Frame(14,64,85,84) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignRight, // The alignment of this field
			kEllipsizeEnd, // Where to ellipsize the string if the size is larger than its frame
			kTrue,
			kXPGUIStatisticsNbWordsKey, // The String value
			0,  // The Widget ID for associated control for shortcut focus
		),
		StaticTextWidget 
		( 
			kXPGUIStatisticsNbParagraphsValueWidgetID, // The Identifier for this Widget
			kSysStaticTextPMRsrcId, // The Plugin ID
			kBindNone, // Frame binding
			Frame(94,89,170,109) 
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignLeft, // The alignment of this field
			kEllipsizeEnd, // The String value
			kTrue,
			"", 
			0,  // The Widget ID for associated control for shortcut focus
		),
	} 
};

/*
// ------------Link Article Dialog resources.--------------
*/


/*  Dialog LocaleIndex.
*/
resource LocaleIndex (kXPGUILinkArtDialogResourceID)
{
   kViewRsrcType,
	{
		kWildFS,	k_Wild, kXPGUILinkArtDialogResourceID + index_enUS
	}
};

/*  Type definition.
*/
type XPGUILinkArtDialogWidget(kViewRsrcType) : DialogBoss(ClassID = kXPGUILinkArtDialogBoss)
{
};





resource XPGUILinkArtDialogWidget (kXPGUILinkArtDialogResourceID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUILinkArtDialogWidgetID, // WidgetID
	kPMRsrcID_None, // RsrcID
	kBindNone, // Binding
	Frame(5,5,261,240) // Frame (l,t,r,b)
	kTrue, 
	kTrue, // Visible, Enabled
	kXPGUIRelinkArtDialogTitleKey, // Dialog name
	{
		StaticTextWidget 
		( 
			0, // The Identifier for this Widget
			kPMRsrcID_None, // The Plugin ID
			kBindRight | kBindTop, // Frame binding
			Frame(9,9,89,29) // Frame left, top, right, bottom
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignLeft, // The alignment of this field
			kDontEllipsize, // Where to ellipsize the string if the size is larger than its frame
			kTrue,
			kXPGUIClasseurTextKey, // The String value
			0,  // The Widget ID for associated control for shortcut focus
		),
		DropDownListWidget 
		( 
			kXPGUIClasseurListWidgetID, // The Identifier for this Widget
			kSysDropDownPMRsrcId, // The Plugin ID
			kBindLeft | kBindRight, // Frame binding
			Frame(104,9,244,29) // Frame (l,t,r,b)
			kTrue, // Is this visible
			kTrue, 
			{
				{
					//array
				}
			},
		),
		StaticTextWidget 
		( 
			0, // The Identifier for this Widget
			kPMRsrcID_None, // The Plugin ID
			kBindRight | kBindTop, // Frame binding
			Frame(9,39,89,59) // Frame left, top, right, bottom
			kTrue, // Is this visible
			kTrue, // Is this enabled
			kAlignLeft, // The alignment of this field
			kDontEllipsize, // Where to ellipsize the string if the size is larger than its frame
			kTrue,
			kXPGUICartonTextKey, // The String value
			0,  // The Widget ID for associated control for shortcut focus
		),
		DropDownListWidget 
		( 
			kXPGUICartonListWidgetID, // The Identifier for this Widget
			kSysDropDownPMRsrcId, // The Plugin ID
			kBindLeft | kBindRight, // Frame binding
			Frame(104,39,245,59) // Frame (l,t,r,b)
			kTrue, // Is this visible
			kTrue, 
			{
				{
					//array
				}
			},
		),
		
		XPGUIDisplayImagePanelWidget 
		( 
			kXPGUIDisplayImagePanelWidgetID, // The Identifier for this Widget
			kPMRsrcID_None, // The Plugin ID
			kBindTop | kBindBottom | kBindRight, // Frame binding
			Frame(9,69,235,205) // Frame left, top, right, bottom
			kTrue, // Is this visible
			kTrue, // Is this enabled
			"", 
			{
			} 
		),				
		
		DefaultButtonWidget 
		( 
			kOKButtonWidgetID, // WidgetID
			kSysButtonPMRsrcId, // RsrcID
			kBindNone, // Binding
			Frame(134,210,214,230) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			kSDKDefOKButtonApplicationKey,  // Button text
		),
		CancelButtonWidget 
		( 
			kCancelButton_WidgetID, // WidgetID
			kSysButtonPMRsrcId, // RsrcID
			kBindNone, // Binding
			Frame(39,210,119,230) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			kSDKDefCancelButtonApplicationKey, // Button name
			kTrue,  // Change to Reset on option-click.
		),
	} 
};

/*
// ------------Resa Redac Panel resources.--------------
*/


/*  Panel LocaleIndex.
*/
resource LocaleIndex (kXPGUIResaRedacPanelResourceID)
{
   kViewRsrcType,
	{
		kWildFS,	k_Wild, kXPGUIResaRedacPanelResourceID + index_enUS
	}
};

/*  Type definition.
*/
type XPGUIResaRedacPanelWidget(kViewRsrcType) : GenericPalettePanelWidget (ClassID = kXPGUIResaRedacPanelWidgetBoss)
{
	CPanelMenuData;
}

/*  Panel definition.
This view is not localised: therefore, it can reside here.
However, if you wish to localise it, it is recommended to locate it in one of
the localised framework resource files (i.e. SNR_enUS.fr etc.) and
update your Panel LocaleIndex accordingly.
*/
resource XPGUIResaRedacPanelWidget (kXPGUIResaRedacPanelResourceID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUIResaRedacPanelWidgetID, // WidgetId
	kPMRsrcID_None, // RsrcId
	kBindNone, // Frame binding
	Frame(0,0,260,204) // Frame
	kTrue, // Visible
	kTrue, // Enabled
	kTrue, // Erase background
	kInterfacePaletteFill, // Erase to color
	kFalse, // Draw dropshadow
	kXPGUIResaRedacPanelTitleKey, // Panel name
	{
		StaticTextWidget 
		( 
			0, 
			kSysStaticTextPMRsrcId, // WidgetId, RsrcId
			kBindNone, 
			Frame(15,9,65,29) // Frame left, top, right, bottom
			kTrue, 
			kTrue, 
			kAlignLeft, // Visible, Enabled, Alignment
			kEllipsizeEnd, 
			kTrue,
			kXPGUITopicTextKey, 
			0,
		),
		MultilineTextEditBoxWidget 
		( 
			kXPGUITopicWidgetID, 
			kSysMultilineEditBoxRsrcId, 
			kApplicationRsrcPluginID, // WidgetId, RsrcId
			kBindLeft | kBindRight, 
			Frame(74,9,245,49) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			0, // widget id of nudge button
			0, 
			0, // small/large nudge amount
			0, // max num chars( 0 = no limit)
			kFalse, // is read only
			kFalse, // should notify each key stroke
			kFalse, // range checking enabled
			kFalse, // blank entry allowed
			0, 
			0, // upper/lower bounds
			"",  // initial text
		),
		
		StaticTextWidget 
		( 
			kXPGUICalibrageStaticTextWidgetID, 
			kPMRsrcID_None, 
			kBindNone, 
			Frame(15,59,96,79) // Frame
			kTrue, 
			kTrue, // Visible, Enabled,
			// StaticTextAttributes fields below
			kAlignLeft, // Alignment
			kDontEllipsize, // Ellipsize style
			kTrue,
			kXPGUICalibrageKey, 
			kXPGUICalibrageStaticTextWidgetID,
		),
		
		RollOverIconButtonWidget 
		( 
			kXPGUIComputeCalibrageWidgetID, // widget ID
			kXPGUIComputeResourceID, 
			kXPGUIPluginID, // icon, plugin ID
			kBindTop | kBindRight, // frame binding
			Frame(72,57,92,81) //  left, top, right, bottom
			kTrue, // visible
			kTrue, // enabled
			kStyledIconSuiteFlushedButtonType,
		),
		
		IntEditBoxWidget 
		( 
			kXPGUICalibrageTextWidgetId, // WidgetId,
			kSysEditBoxRsrcId, 
			kXPGUIPluginID, // RsrcId
			kBindNone, // Frame binding
			Frame(104,59,245,79) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			0, // widget id of nudge button
			1, 
			10, // small/large nudge amount
			6, // max num chars( 0 = no limit)
			kFalse, // is read only
			kFalse, // should notify each key stroke
			kTrue, // range checking enabled
			kFalse, // blank entry allowed
			999999, 
			0, // upper/lower bounds
			"0",  // initial value
		),
		
		StaticTextWidget 
		( 
			kXPGUINbImagesStaticTextWidgetID, 
			kPMRsrcID_None, 
			kBindNone, 
			Frame(15,89,131,109) // Frame
			kTrue, 
			kTrue, // Visible, Enabled,
			// StaticTextAttributes fields below
			kAlignLeft, // Alignment
			kDontEllipsize, // Ellipsize style
			kTrue,
			kXPGUINbImagesKey, 
			kXPGUINbImagesTextWidgetId,
		),
		
		IntEditBoxWidget 
		( 
			kXPGUINbImagesTextWidgetId, // WidgetId,
			kSysEditBoxRsrcId, 
			kXPGUIPluginID, // RsrcId
			kBindNone, // Frame binding
			Frame(119,89,155,109) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			kXPGUINbImagesNudgeWidgetId, // widget id of nudge button
			1, 
			10, // small/large nudge amount
			3, // max num chars( 0 = no limit)
			kFalse, // is read only
			kFalse, // should notify each key stroke
			kTrue, // range checking enabled
			kFalse, // blank entry allowed
			20, 
			0, // upper/lower bounds
			"0",  // initial value
		),
		
		NudgeControlWidget 
		( 
			kXPGUINbImagesNudgeWidgetId, 
			kPMRsrcID_None, 
			kBindNone, // Frame binding
			Frame(104,89,121,109) // Frame
			kTrue, 
			kTrue,  // Visible, Enabled
		),
		
		
		ButtonWidget 
		( 
			kXPGUIUnApplyResaWidgetID, // WidgetID
			kSysButtonPMRsrcId, // RsrcID
			kBindNone, // Binding
			Frame(80,174,160,194) // Frame (l,t,r,b)
			kTrue, 
			kFalse, // Visible, Enabled
			kXPGUIDeleteResaKey,  // Button text
		),
		
		ButtonWidget 
		( 
			kXPGUIApplyResaWidgetID, // WidgetID
			kSysButtonPMRsrcId, // RsrcID
			kBindNone, // Binding
			Frame(165,174,245,194) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			kXPGUICreateResaKey,  // Button text
		),
	} 
	
	kXPGUIResaRedacPopupMenuNameKey,
}


/*
// ------------Assemblages Panel resources.--------------
*/

resource LocaleIndex (kXPGUIAssemblagesPanelResourceID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, 	kXPGUIAssemblagesPanelResourceID + index_enUS
	}
};

/*  Type definition.
*/
type XPGUIAssemblagesPanelWidget(kViewRsrcType) : GenericPalettePanelWidget (ClassID = kXPGUIAssemblagesPanelWidgetBoss)
{
	CPanelMenuData;
	SizePanelDetailController;
}

type XPGUIAssemblagesViewWidget(kViewRsrcType) : TreeViewWidget(ClassID = kXPGUIAssemblagesViewWidgetBoss) 
{};

resource XPGUIAssemblagesPanelWidget (kXPGUIAssemblagesPanelResourceID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUIAssemblagesPanelWidgetID, // WidgetId
	kPMRsrcID_None, // RsrcId
	kBindNone, // Frame binding
	Frame(0,0,551,280) // Frame
	kTrue, // Visible
	kTrue, // Enabled
	kTrue, // Erase background
	kInterfacePaletteFill, // Erase to color
	kFalse, // Draw dropshadow
	kXPGUIAssemblagesPanelTitleKey, // Panel name
	{
		StaticTextWidget 
		( 
			0, 
			kPMRsrcID_None, // WidgetId, RsrcId
			kBindRight | kBindTop, // Frame binding
			Frame(179,4,239,19) // Frame
			kTrue, 
			kTrue, 
			kAlignRight, 
			kEllipsizeEnd, // Visible, Enabled
			kTrue,
			kXPGUIClasseurTextKey, // Text
			0,
		),
		TextComboBoxWidget 
		( 
			kXPGUIComboClasseurListWidgetID, 
			kSysDropDownPMRsrcId, // WidgetId, RsrcId
			kBindRight | kBindTop, 
			Frame(249,4,351,21) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			0, // widget id of nudge button
			0, 
			0, // small/large nudge amount
			30, // max num chars( 0 = no limit)
			kFalse, // is read only
			kFalse, // should notify each key stroke
			kFalse, // range checking enabled
			kFalse, // blank entry allowed
			0, 
			0, // upper/lower bounds
			"", 
			{
				{										// initial text
				}
			},
		),

		// IMPORTANT : on conserve ici le widget ID de la palette "Formes" pour disposer des vignettes sans modifs
		XPGUIDisplayImagePanelWidget 
		( 
			kXPGUIDisplayImageFormePanelWidgetID, // WidgetId
			kPMRsrcID_None, // RsrcId
			kBindTop | kBindBottom | kBindRight, 
			Frame(344,24,545,245) // Frame(left, top, right, bottom)
			kTrue, // Visible
			kTrue, // Enabled
			"", 
			{
			} 
		),
		
		PanelWithHiliteBorderWidget 
		( 
			0, // widget ID
			kPMRsrcID_None, // PMRsrc ID
			kBindAll, // frame binding
			Frame(0,25,340,245) //  left, top, right, bottom
			kTrue, // visible
			kTrue, // enabled
			"", 
			{
				XPGUIAssemblagesViewWidget 
				( 
					kXPGUIAssemblagesViewWidgetID, 
					kPMRsrcID_None, // WidgetId, RsrcId
					kBindAll, 
					Frame(0,1,339,219) // Frame
					kTrue, 
					kTrue, // Visible, Enabled
					kTrue, // EraseBeforeDraw
					kInterfacePaletteFill, // InterfaceColor
					"", 
					kFalse, // Display root node
					kFalse, // Use H Scroll bar
					kTrue, // Use V scroll bar
					20, // fVScrollButtonIncrement
					20, // fVThumbScrollIncrement
					20, // fHScrollButtonIncrement
					20, // fHThumbScrollIncrement
					1, // Items selectable, 0 = No Selection, 1 = Single Selection, 2 = Multiple Selection
					kFalse, // Allow children from multiple parents to be selected
					kFalse, // Allow discontiguous selection
					{
					} 
				),
			} 
		),
		ButtonWidget 
		( 
			kXPGUIPlaceAutoAssemblageWidgetID, // WidgetId
			kSysButtonPMRsrcId, 			 // RsrcId
			kBindRight | kBindTop, 			 // Frame binding
			Frame(10, 249, 100, 263) 
			kTrue, 							 // Visible
			kTrue, 							 // Enabled
			kXPGUIPlacementAutoKey,  		 // Button name
		),
				
		RollOverIconButtonWidget 
		( // ADBEIconSuiteButtonView properties
			kXPGUINewAssemblageWidgetID, // widget ID
			kNewObjectButtonIcon, 
			kApplicationRsrcPluginID, // icon, plugin ID
			kBindRight | kBindBottom, // frame binding
			Frame(269,249,299,263) //  left, top, right, bottom
			kTrue, // visible
			kTrue, // enabled
			kADBEIconSuiteButtonType,
		),
	
		RollOverIconButtonWidget 
		( // ADBEIconSuiteButtonView properties
			kXPGUIDeleteAssemblageWidgetID, // widget ID
			kDeleteObjectButtonIcon, 
			kApplicationRsrcPluginID, // icon, plugin ID
			kBindRight | kBindBottom, // frame binding
			Frame(309,249,339,263) //  left, top, right, bottom
			kTrue, // visible
			kTrue, // enabled
			kADBEIconSuiteButtonType,
		),
	}
	kXPGUIAssemblagePopupMenuNameKey,  
};


/*
// ------------New Assemblage dialog resources.--------------
*/
type XPGUINewAssemblageDialogWidget(kViewRsrcType) : DialogBoss(ClassID = kXPGUINewAssemblageDialogBoss) 
{
};

resource LocaleIndex (kXPGUINewAssemblageDialogResourceID)
{
   kViewRsrcType,
	{
		kWildFS,	k_Wild, kXPGUINewAssemblageDialogResourceID + index_enUS
	}
};


resource XPGUINewAssemblageDialogWidget (kXPGUINewAssemblageDialogResourceID + index_enUS) 
{ 
	__FILE__, 
	__LINE__, 
	kXPGUINewAssemblageDialogWidgetID, // WidgetID
	kPMRsrcID_None, // RsrcID
	kBindNone, // Binding
	Frame(0,0,380,105) // Frame (l,t,r,b)
	kTrue, 
	kTrue, // Visible, Enabled
	kXPGUINewAssemblageDialogTitleKey, // Dialog name
	{
		StaticTextWidget 
		( 
			0, 
			kSysStaticTextPMRsrcId, // WidgetId, RsrcId
			kBindNone, 
			Frame(10,10,120,27) // Frame left, top, right, bottom
			kTrue, 
			kTrue, 
			kAlignLeft, // Visible, Enabled, Alignment
			kEllipsizeEnd, 
			kTrue,
			kXPGUIAssemblageNameKey, 
			0,  // WidgetID this shortcut is connected to, 0 if none.
		),
		TextEditBoxWidget 
		( 
			kXPGUIAssemblageNameWidgetID, 
			kSysEditBoxPMRsrcId, // WidgetId, RsrcId
			kBindNone, 
			Frame(120, 10, 370, 30) // Frame
			kTrue, 
			kTrue, // Visible, Enabled
			0, // widget id of nudge button
			0, 
			0, // small/large nudge amount
			0, // max num chars( 0 = no limit)
			kFalse, // is read only
			kFalse, // should notify each key stroke
			kFalse, // range checking enabled
			kFalse, // blank entry allowed
			0, 
			0, // upper/lower bounds
			"",  // initial text
		),
		StaticTextWidget 
		( 
			0, 
			kSysStaticTextPMRsrcId, // WidgetId, RsrcId
			kBindNone, 
			Frame(10, 40, 110, 57) // Frame left, top, right, bottom
			kTrue, 
			kTrue, 
			kAlignLeft, // Visible, Enabled, Alignment
			kEllipsizeEnd, 
			kTrue,
			kXPGUIClasseurTextKey, 
			0,  // WidgetID this shortcut is connected to, 0 if none.
		),
		XPGUIDropDownListWidget 
		( 
			kXPGUIRubriqueListWidgetID, 
			kSysDropDownPMRsrcId, // WidgetId, RsrcId
			kBindLeft | kBindRight, // Frame binding
			Frame(120, 40, 370, 60) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			{
				{				// List Items
				}
			},
		),
		DefaultButtonWidget 
		( 
			kOKButtonWidgetID, // WidgetID
			kSysButtonPMRsrcId, // RsrcID
			kBindNone, // Binding
			Frame(105,75,185,95) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			kSDKDefOKButtonApplicationKey,  // Button text
		),
		CancelButtonWidget 
		( 
			kCancelButton_WidgetID, // WidgetID
			kSysButtonPMRsrcId, // RsrcID
			kBindNone, // Binding
			Frame(195,75,275,95) // Frame (l,t,r,b)
			kTrue, 
			kTrue, // Visible, Enabled
			kSDKDefCancelButtonApplicationKey, // Button name
			kFalse,  // Change to Reset on option-click.
		),
	} 
};




#endif // __ODFRC__

#include "XPGUI_enUS.fr"
#include "XPGUI_frFR.fr"

//  Code generated by DollyXs code generator
