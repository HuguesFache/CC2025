//========================================================================================
//  
//  $File: $
//  
//  Owner: Badr Nasser
//  
//  $Author: $
//  
//  $DateTime: $
//  
//  $Revision: $
//  
//  $Change: $
//  
//  Copyright 1997-2007 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//========================================================================================

#include "VCPlugInHeaders.h"

// Interface includes:
#include "IPMUnknown.h"
#include "IXLGFacade.h"

// General includes:

// Project includes:
#include "XLGID.h"

/**  A facade provides a level of APIs that sits on top of commands.  If your plug-in implements
	commands or calls a collection of InDesign commands for which a facade is not provided
	you should process those commands from within a facade.  You then can then call the same
	code in several contexts.  For example if you implement scripting and a UI
*/
class XLGFacade : public CPMUnknown<IXLGFacade>
{
public:
	/** Constructor.
	@param boss interface ptr from boss object on which this interface is aggregated.
	*/
	XLGFacade(IPMUnknown* boss) : CPMUnknown<IXLGFacade>(boss) {};

	/** Destructor. Does nothing.
	*/
	~XLGFacade() {}

	virtual bool16 CanDoX(const UIDList& items) const;
	virtual ErrorCode DoX(const UIDList& items) ;

	virtual bool16 CanDoY(const UIDList& items) const ;
	virtual ErrorCode DoY(const UIDList& items) ;

	virtual void GetZ( const UIDList& items, K2Vector<int32> & vector) ;
	virtual ErrorCode SetZ( const UIDList& items, int32 z ) ;
};


CREATE_PMINTERFACE(XLGFacade, kXLGFacadeImpl)

/* 
*/
bool16 XLGFacade::CanDoX(const UIDList& items) const
{
	return kTrue;
}

/* 
*/
ErrorCode XLGFacade::DoX(const UIDList& items)
{
	return kFailure;
}

/* 
*/
bool16 XLGFacade::CanDoY(const UIDList& items) const
{
	return kTrue;
}

/*
*/
ErrorCode XLGFacade::DoY(const UIDList& items)
{
	return kFailure;
}

/* 
*/
void XLGFacade::GetZ( const UIDList& items, K2Vector<int32> & vector)
{
	vector.push_back(1);
}

/* 
*/
ErrorCode XLGFacade::SetZ( const UIDList& items, int32 z )
{
	return kFailure;
}


//  Code generated by DollyXs code generator
