/* WS_XPub.h
   Generated by wsdl2h 1.2.9l from http://192.168.75.116:8081/4DWSDL and typemap.dat
   2010-06-24 16:32:40 GMT
   Copyright (C) 2001-2007 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control schema namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * http://www.4d.com/namespace/default                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to disable)
#import "/iTecFone/gsoap-macosx-2.7/import/stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://www.4d.com/namespace/default"

*/

//gsoap ns1   schema namespace:	http://www.4d.com/namespace/default
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:date"
typedef std::string xsd__date;


//  Forward declaration of class ArrayOfstring.
class ArrayOfstring;

//  Forward declaration of class ArrayOfdate.
class ArrayOfdate;

/// "http://www.4d.com/namespace/default":ArrayOfstring is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of xs:string
class ArrayOfstring
{ public:
/// Pointer to array of std::string*.
    std::string*                        *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.4d.com/namespace/default":ArrayOfdate is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of xs:date
class ArrayOfdate
{ public:
/// Pointer to array of xsd__date*.
    xsd__date*                          *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	A_USCOREWebServiceBinding 
//gsoap ns1  service type:	A_USCOREWebServiceRPC 
//gsoap ns1  service port:	http://192.168.75.116:8081/4DSOAP/ 
//gsoap ns1  service namespace:	http://www.4d.com/namespace/default 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage A_WebService Definitions

@section A_USCOREWebService_bindings Bindings
  - @ref A_USCOREWebServiceBinding

*/

/**

@page A_USCOREWebServiceBinding Binding "A_USCOREWebServiceBinding"

@section A_USCOREWebService_service Service Documentation "A_WebService"


@section A_USCOREWebServiceBinding_operations Operations of Binding  "A_USCOREWebServiceBinding"
  - @ref ns1__WS_USCOREIdentification
  - @ref ns1__WS_USCOREListePub
  - @ref ns1__WS_USCOREPub
  - @ref ns1__WS_USCOREListeTitre
  - @ref ns1__WS_USCOREModifChamp
  - @ref ns1__WS_USCOREListePubParu
  - @ref ns1__WS_USCOREListeEtatsPub
  - @ref ns1__WS_USCOREListeEditions
  - @ref ns1__WS_USCOREListePubSeule
  - @ref ns1__WS_USCOREMS_USCOREGetTask
  - @ref ns1__WS_USCOREMS_USCOREEPSKilled
  - @ref ns1__WS_USCOREMS_USCOREAdSentInBAT
  - @ref ns1__WS_USCOREMS_USCOREAdSentInMEP
  - @ref ns1__WS_USCOREMS_USCOREBATMovedToMEP
  - @ref ns1__WS_USCOREMS_USCOREAgenceChanged
  - @ref ns1__WS_USCOREMS_USCORERepasseAutoDone
  - @ref ns1__WS_USCOREMS_USCOREPubArchived
  - @ref ns1__WS_USCOREMAJPieceJointe_USCOREold
  - @ref ns1__WS_USCORESupSociete
  - @ref ns1__WS_USCORESupPub
  - @ref ns1__WS_USCORESupContact
  - @ref ns1__WS_USCORESupOffre
  - @ref ns1__WS_USCORENouveauCommercial
  - @ref ns1__WS_USCORESupCommercial
  - @ref ns1__WS_USCOREGetPathMEPFilePDF
  - @ref ns1__WS_USCOREMAJPieceJointe
  - @ref ns1__WS_USCORENouveauContact
  - @ref ns1__WS_USCORENouvelleSociete
  - @ref ns1__WS_USCORENouvelleOffre
  - @ref ns1__WS_USCORENouvellePub
  - @ref ns1__WS_USCOREListeDateAvant
  - @ref ns1__WS_USCOREListeDateApres

@section A_USCOREWebServiceBinding_ports Endpoints of Binding  "A_USCOREWebServiceBinding"
  - http://192.168.75.116:8081/4DSOAP/

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * A_USCOREWebServiceBinding                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREIdentification                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__WS_USCOREIdentificationResponse" of service binding "A_USCOREWebServiceBinding" operation "ns1__WS_USCOREIdentification"
struct ns1__WS_USCOREIdentificationResponse
{
    std::string                         Reponse;
    std::string                         PrenomNom;
};

/// Operation "ns1__WS_USCOREIdentification" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

Fonction de connexion sur la base.On recherche l'utilisateur dans la base.jeudi 5 fvrier 2004 22:38Il faut ajouter un troisime paramtre permettant de savoir que est le type de client: XPubClient ou XTAdFollowUp ou autre.Les fonctions SOAP clients doivent tre modifies.
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_Identification"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREIdentification(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         login,
    std::string                         password,
    std::string                         client,
    // response parameters:
    struct ns1__WS_USCOREIdentificationResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREIdentification(
    struct soap *soap,
    // request parameters:
    std::string                         login,
    std::string                         password,
    std::string                         client,
    // response parameters:
    struct ns1__WS_USCOREIdentificationResponse&
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREIdentification rpc
//gsoap ns1  service method-encoding:	WS_USCOREIdentification http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREIdentification A_WebService#WS_Identification
int ns1__WS_USCOREIdentification(
    std::string                         login,	///< Request parameter
    std::string                         password,	///< Request parameter
    std::string                         client,	///< Request parameter
    struct ns1__WS_USCOREIdentificationResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREListePub                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__WS_USCOREListePubResponse" of service binding "A_USCOREWebServiceBinding" operation "ns1__WS_USCOREListePub"
struct ns1__WS_USCOREListePubResponse
{
    ArrayOfstring*                      IDPub;
    ArrayOfdate*                        DateParution;
    ArrayOfstring*                      TypeTravail;
    ArrayOfstring*                      Etat;
    ArrayOfstring*                      Soc;
    int                                 NbValAds;
};

/// Operation "ns1__WS_USCOREListePub" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_ListePub"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREListePub(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         title,
    std::string                         edition,
    std::string                         status,
    std::string                         numpage,
    std::string                         dateparfrom,
    std::string                         datepar,
    std::string                         User,
    // response parameters:
    struct ns1__WS_USCOREListePubResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREListePub(
    struct soap *soap,
    // request parameters:
    std::string                         title,
    std::string                         edition,
    std::string                         status,
    std::string                         numpage,
    std::string                         dateparfrom,
    std::string                         datepar,
    std::string                         User,
    // response parameters:
    struct ns1__WS_USCOREListePubResponse&
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREListePub rpc
//gsoap ns1  service method-encoding:	WS_USCOREListePub http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREListePub A_WebService#WS_ListePub
int ns1__WS_USCOREListePub(
    std::string                         title,	///< Request parameter
    std::string                         edition,	///< Request parameter
    std::string                         status,	///< Request parameter
    std::string                         numpage,	///< Request parameter
    std::string                         dateparfrom,	///< Request parameter
    std::string                         datepar,	///< Request parameter
    std::string                         User,	///< Request parameter
    struct ns1__WS_USCOREListePubResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREPub                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__WS_USCOREPubResponse" of service binding "A_USCOREWebServiceBinding" operation "ns1__WS_USCOREPub"
struct ns1__WS_USCOREPubResponse
{
    std::string                         FichierEPS;
    std::string                         FichierPDF;
    std::string                         Dossier;
    std::string                         Emetteur;
    std::string                         TypeCouleur;
    std::string                         TypeTravail;
    xsd__date                           DateParution;
    bool                                Paru;
    std::string                         Largeur;
    std::string                         Hauteur;
    bool                                Web;
    std::string                         ImageWeb;
    bool                                BAT;
    std::string                         Visu;
    std::string                         Customer;
    std::string                         Status;
    std::string                         User;
    std::string                         FaxCustomer;
    std::string                         MobileCustomer;
    std::string                         EMailCustomer;
    std::string                         TelephoneCustomer;
    std::string                         ContactName;
    std::string                         EPSMargeHaut;
    std::string                         EPSMargeBas;
    std::string                         EPSMargeGauche;
    std::string                         EPSMargeDroite;
    std::string                         CadreRefOrigX;
    std::string                         CadreRefOrigY;
    std::string                         CadreRefAngle;
    std::string                         CadreRefLargeur;
    std::string                         CadreRefHauteur;
    std::string                         CadreRefPolice;
    std::string                         CadreRefCorps;
    bool                                CadreRefExterieur;
    std::string                         CadreRefOffsetX;
    std::string                         CadreRefOffsetY;
    std::string                         CadreRefJustifHoriz;
};

/// Operation "ns1__WS_USCOREPub" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_Pub"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREPub(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         PubID,
    std::string                         MachineType,
    std::string                         Client,
    // response parameters:
    struct ns1__WS_USCOREPubResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREPub(
    struct soap *soap,
    // request parameters:
    std::string                         PubID,
    std::string                         MachineType,
    std::string                         Client,
    // response parameters:
    struct ns1__WS_USCOREPubResponse&
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREPub rpc
//gsoap ns1  service method-encoding:	WS_USCOREPub http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREPub A_WebService#WS_Pub
int ns1__WS_USCOREPub(
    std::string                         PubID,	///< Request parameter
    std::string                         MachineType,	///< Request parameter
    std::string                         Client,	///< Request parameter
    struct ns1__WS_USCOREPubResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREListeTitre                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__WS_USCOREListeTitreResponse" of service binding "A_USCOREWebServiceBinding" operation "ns1__WS_USCOREListeTitre"
struct ns1__WS_USCOREListeTitreResponse
{
    ArrayOfstring*                      Titre;
    int                                 NbValTitres;
};

/// Operation "ns1__WS_USCOREListeTitre" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

jeudi 5 fvrier 2004 22:37 Dbut des CommentairesListe des titres
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_ListeTitre"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREListeTitre(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns1__WS_USCOREListeTitreResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREListeTitre(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns1__WS_USCOREListeTitreResponse&
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREListeTitre rpc
//gsoap ns1  service method-encoding:	WS_USCOREListeTitre http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREListeTitre A_WebService#WS_ListeTitre
int ns1__WS_USCOREListeTitre(
    struct ns1__WS_USCOREListeTitreResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREModifChamp                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCOREModifChamp" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

Cette fonction permet de changer l'tat de la publicit.Les autres champs ne peuvent pas tre changs par les clients SOAP.jeudi 5 fvrier 2004 22:39Suppression des changements autre que l'tat.La gestion du changement est faite dans une nouvelle mthode: dochangeStatus.Celle-ci lance des process (serveur) pour raliser les diffrentes oprations de copies de fichiers.
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_ModifChamp"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREModifChamp(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         PubID,
    std::string                         Champ,
    std::string                         Valeur,
    std::string                         User,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREModifChamp(
    struct soap *soap,
    // request parameters:
    std::string                         PubID,
    std::string                         Champ,
    std::string                         Valeur,
    std::string                         User,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREModifChamp rpc
//gsoap ns1  service method-encoding:	WS_USCOREModifChamp http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREModifChamp A_WebService#WS_ModifChamp
int ns1__WS_USCOREModifChamp(
    std::string                         PubID,	///< Request parameter
    std::string                         Champ,	///< Request parameter
    std::string                         Valeur,	///< Request parameter
    std::string                         User,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREListePubParu                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__WS_USCOREListePubParuResponse" of service binding "A_USCOREWebServiceBinding" operation "ns1__WS_USCOREListePubParu"
struct ns1__WS_USCOREListePubParuResponse
{
    ArrayOfstring*                      IDPub;
    ArrayOfdate*                        DateParution;
    ArrayOfstring*                      TypeTravail;
    ArrayOfstring*                      Etat;
    ArrayOfstring*                      Soc;
};

/// Operation "ns1__WS_USCOREListePubParu" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_ListePubParu"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREListePubParu(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         title,
    std::string                         edition,
    std::string                         status,
    std::string                         numpage,
    std::string                         datepar,
    // response parameters:
    struct ns1__WS_USCOREListePubParuResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREListePubParu(
    struct soap *soap,
    // request parameters:
    std::string                         title,
    std::string                         edition,
    std::string                         status,
    std::string                         numpage,
    std::string                         datepar,
    // response parameters:
    struct ns1__WS_USCOREListePubParuResponse&
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREListePubParu rpc
//gsoap ns1  service method-encoding:	WS_USCOREListePubParu http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREListePubParu A_WebService#WS_ListePubParu
int ns1__WS_USCOREListePubParu(
    std::string                         title,	///< Request parameter
    std::string                         edition,	///< Request parameter
    std::string                         status,	///< Request parameter
    std::string                         numpage,	///< Request parameter
    std::string                         datepar,	///< Request parameter
    struct ns1__WS_USCOREListePubParuResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREListeEtatsPub                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__WS_USCOREListeEtatsPubResponse" of service binding "A_USCOREWebServiceBinding" operation "ns1__WS_USCOREListeEtatsPub"
struct ns1__WS_USCOREListeEtatsPubResponse
{
    ArrayOfstring*                      EtatPub;
    int                                 NbValEtatsPub;
};

/// Operation "ns1__WS_USCOREListeEtatsPub" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_ListeEtatsPub"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREListeEtatsPub(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns1__WS_USCOREListeEtatsPubResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREListeEtatsPub(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns1__WS_USCOREListeEtatsPubResponse&
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREListeEtatsPub rpc
//gsoap ns1  service method-encoding:	WS_USCOREListeEtatsPub http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREListeEtatsPub A_WebService#WS_ListeEtatsPub
int ns1__WS_USCOREListeEtatsPub(
    struct ns1__WS_USCOREListeEtatsPubResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREListeEditions                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__WS_USCOREListeEditionsResponse" of service binding "A_USCOREWebServiceBinding" operation "ns1__WS_USCOREListeEditions"
struct ns1__WS_USCOREListeEditionsResponse
{
    ArrayOfstring*                      Editions;
    int                                 NbEditions;
};

/// Operation "ns1__WS_USCOREListeEditions" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_ListeEditions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREListeEditions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         title,
    // response parameters:
    struct ns1__WS_USCOREListeEditionsResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREListeEditions(
    struct soap *soap,
    // request parameters:
    std::string                         title,
    // response parameters:
    struct ns1__WS_USCOREListeEditionsResponse&
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREListeEditions rpc
//gsoap ns1  service method-encoding:	WS_USCOREListeEditions http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREListeEditions A_WebService#WS_ListeEditions
int ns1__WS_USCOREListeEditions(
    std::string                         title,	///< Request parameter
    struct ns1__WS_USCOREListeEditionsResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREListePubSeule                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__WS_USCOREListePubSeuleResponse" of service binding "A_USCOREWebServiceBinding" operation "ns1__WS_USCOREListePubSeule"
struct ns1__WS_USCOREListePubSeuleResponse
{
    std::string                         IDPub;
    xsd__date                           DateParution;
    std::string                         TypeTravail;
    std::string                         Etat;
    std::string                         Soc;
    std::string                         CheminArchive;
    int                                 NbValAds;
};

/// Operation "ns1__WS_USCOREListePubSeule" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_ListePubSeule"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREListePubSeule(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         PubID,
    std::string                         User,
    // response parameters:
    struct ns1__WS_USCOREListePubSeuleResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREListePubSeule(
    struct soap *soap,
    // request parameters:
    std::string                         PubID,
    std::string                         User,
    // response parameters:
    struct ns1__WS_USCOREListePubSeuleResponse&
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREListePubSeule rpc
//gsoap ns1  service method-encoding:	WS_USCOREListePubSeule http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREListePubSeule A_WebService#WS_ListePubSeule
int ns1__WS_USCOREListePubSeule(
    std::string                         PubID,	///< Request parameter
    std::string                         User,	///< Request parameter
    struct ns1__WS_USCOREListePubSeuleResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREMS_USCOREGetTask                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__WS_USCOREMS_USCOREGetTaskResponse" of service binding "A_USCOREWebServiceBinding" operation "ns1__WS_USCOREMS_USCOREGetTask"
struct ns1__WS_USCOREMS_USCOREGetTaskResponse
{
    std::string                         IDPub;
    std::string                         Label;
    std::string                         Instructions;
};

/// Operation "ns1__WS_USCOREMS_USCOREGetTask" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_MS_GetTask"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREMS_USCOREGetTask(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         Agence,
    // response parameters:
    struct ns1__WS_USCOREMS_USCOREGetTaskResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREMS_USCOREGetTask(
    struct soap *soap,
    // request parameters:
    std::string                         Agence,
    // response parameters:
    struct ns1__WS_USCOREMS_USCOREGetTaskResponse&
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREMS_USCOREGetTask rpc
//gsoap ns1  service method-encoding:	WS_USCOREMS_USCOREGetTask http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREMS_USCOREGetTask A_WebService#WS_MS_GetTask
int ns1__WS_USCOREMS_USCOREGetTask(
    std::string                         Agence,	///< Request parameter
    struct ns1__WS_USCOREMS_USCOREGetTaskResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREMS_USCOREEPSKilled                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCOREMS_USCOREEPSKilled" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_MS_EPSKilled"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREMS_USCOREEPSKilled(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         PubID,
    std::string                         Message,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREMS_USCOREEPSKilled(
    struct soap *soap,
    // request parameters:
    std::string                         PubID,
    std::string                         Message,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREMS_USCOREEPSKilled rpc
//gsoap ns1  service method-encoding:	WS_USCOREMS_USCOREEPSKilled http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREMS_USCOREEPSKilled A_WebService#WS_MS_EPSKilled
int ns1__WS_USCOREMS_USCOREEPSKilled(
    std::string                         PubID,	///< Request parameter
    std::string                         Message,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREMS_USCOREAdSentInBAT                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCOREMS_USCOREAdSentInBAT" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_MS_AdSentInBAT"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREMS_USCOREAdSentInBAT(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         PubID,
    std::string                         Message,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREMS_USCOREAdSentInBAT(
    struct soap *soap,
    // request parameters:
    std::string                         PubID,
    std::string                         Message,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREMS_USCOREAdSentInBAT rpc
//gsoap ns1  service method-encoding:	WS_USCOREMS_USCOREAdSentInBAT http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREMS_USCOREAdSentInBAT A_WebService#WS_MS_AdSentInBAT
int ns1__WS_USCOREMS_USCOREAdSentInBAT(
    std::string                         PubID,	///< Request parameter
    std::string                         Message,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREMS_USCOREAdSentInMEP                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCOREMS_USCOREAdSentInMEP" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_MS_AdSentInMEP"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREMS_USCOREAdSentInMEP(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         PubID,
    std::string                         Message,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREMS_USCOREAdSentInMEP(
    struct soap *soap,
    // request parameters:
    std::string                         PubID,
    std::string                         Message,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREMS_USCOREAdSentInMEP rpc
//gsoap ns1  service method-encoding:	WS_USCOREMS_USCOREAdSentInMEP http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREMS_USCOREAdSentInMEP A_WebService#WS_MS_AdSentInMEP
int ns1__WS_USCOREMS_USCOREAdSentInMEP(
    std::string                         PubID,	///< Request parameter
    std::string                         Message,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREMS_USCOREBATMovedToMEP                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCOREMS_USCOREBATMovedToMEP" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_MS_BATMovedToMEP"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREMS_USCOREBATMovedToMEP(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         PubID,
    std::string                         Message,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREMS_USCOREBATMovedToMEP(
    struct soap *soap,
    // request parameters:
    std::string                         PubID,
    std::string                         Message,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREMS_USCOREBATMovedToMEP rpc
//gsoap ns1  service method-encoding:	WS_USCOREMS_USCOREBATMovedToMEP http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREMS_USCOREBATMovedToMEP A_WebService#WS_MS_BATMovedToMEP
int ns1__WS_USCOREMS_USCOREBATMovedToMEP(
    std::string                         PubID,	///< Request parameter
    std::string                         Message,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREMS_USCOREAgenceChanged                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCOREMS_USCOREAgenceChanged" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_MS_AgenceChanged"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREMS_USCOREAgenceChanged(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         PubID,
    std::string                         Message,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREMS_USCOREAgenceChanged(
    struct soap *soap,
    // request parameters:
    std::string                         PubID,
    std::string                         Message,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREMS_USCOREAgenceChanged rpc
//gsoap ns1  service method-encoding:	WS_USCOREMS_USCOREAgenceChanged http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREMS_USCOREAgenceChanged A_WebService#WS_MS_AgenceChanged
int ns1__WS_USCOREMS_USCOREAgenceChanged(
    std::string                         PubID,	///< Request parameter
    std::string                         Message,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREMS_USCORERepasseAutoDone                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCOREMS_USCORERepasseAutoDone" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_MS_RepasseAutoDone"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREMS_USCORERepasseAutoDone(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         PubID,
    std::string                         Message,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREMS_USCORERepasseAutoDone(
    struct soap *soap,
    // request parameters:
    std::string                         PubID,
    std::string                         Message,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREMS_USCORERepasseAutoDone rpc
//gsoap ns1  service method-encoding:	WS_USCOREMS_USCORERepasseAutoDone http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREMS_USCORERepasseAutoDone A_WebService#WS_MS_RepasseAutoDone
int ns1__WS_USCOREMS_USCORERepasseAutoDone(
    std::string                         PubID,	///< Request parameter
    std::string                         Message,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREMS_USCOREPubArchived                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCOREMS_USCOREPubArchived" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_MS_PubArchived"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREMS_USCOREPubArchived(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         PubID,
    std::string                         Message,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREMS_USCOREPubArchived(
    struct soap *soap,
    // request parameters:
    std::string                         PubID,
    std::string                         Message,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREMS_USCOREPubArchived rpc
//gsoap ns1  service method-encoding:	WS_USCOREMS_USCOREPubArchived http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREMS_USCOREPubArchived A_WebService#WS_MS_PubArchived
int ns1__WS_USCOREMS_USCOREPubArchived(
    std::string                         PubID,	///< Request parameter
    std::string                         Message,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREMAJPieceJointe_USCOREold                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCOREMAJPieceJointe_USCOREold" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

Fonction appelle par Traffic lors de la modification d'une Pub.Traffic nous fourni les paramtres suivants:id_pub: identifiant alpha numrique de la pubdate_parution: date de parution spare par des ";"titre: nom du titreedition: dans quelle ditionlargeur: largeur de la pub en mmhauteur: hauteur de la pub en mmcommentaire: commentaire pour la fab (ou identifiant de la repasse).
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_MAJPieceJointe_old"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREMAJPieceJointe_USCOREold(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         id_USCOREpub,
    std::string                         date_USCOREparution,
    std::string                         titre,
    std::string                         edition,
    std::string                         largeur,
    std::string                         hauteur,
    std::string                         commentaire,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREMAJPieceJointe_USCOREold(
    struct soap *soap,
    // request parameters:
    std::string                         id_USCOREpub,
    std::string                         date_USCOREparution,
    std::string                         titre,
    std::string                         edition,
    std::string                         largeur,
    std::string                         hauteur,
    std::string                         commentaire,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREMAJPieceJointe_USCOREold rpc
//gsoap ns1  service method-encoding:	WS_USCOREMAJPieceJointe_USCOREold http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREMAJPieceJointe_USCOREold A_WebService#WS_MAJPieceJointe_old
int ns1__WS_USCOREMAJPieceJointe_USCOREold(
    std::string                         id_USCOREpub,	///< Request parameter
    std::string                         date_USCOREparution,	///< Request parameter
    std::string                         titre,	///< Request parameter
    std::string                         edition,	///< Request parameter
    std::string                         largeur,	///< Request parameter
    std::string                         hauteur,	///< Request parameter
    std::string                         commentaire,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCORESupSociete                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCORESupSociete" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_SupSociete"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCORESupSociete(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         id_USCOREsociete,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCORESupSociete(
    struct soap *soap,
    // request parameters:
    std::string                         id_USCOREsociete,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCORESupSociete rpc
//gsoap ns1  service method-encoding:	WS_USCORESupSociete http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCORESupSociete A_WebService#WS_SupSociete
int ns1__WS_USCORESupSociete(
    std::string                         id_USCOREsociete,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCORESupPub                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCORESupPub" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_SupPub"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCORESupPub(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         id_USCOREpub,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCORESupPub(
    struct soap *soap,
    // request parameters:
    std::string                         id_USCOREpub,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCORESupPub rpc
//gsoap ns1  service method-encoding:	WS_USCORESupPub http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCORESupPub A_WebService#WS_SupPub
int ns1__WS_USCORESupPub(
    std::string                         id_USCOREpub,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCORESupContact                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCORESupContact" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_SupContact"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCORESupContact(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         id_USCOREcontact,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCORESupContact(
    struct soap *soap,
    // request parameters:
    std::string                         id_USCOREcontact,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCORESupContact rpc
//gsoap ns1  service method-encoding:	WS_USCORESupContact http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCORESupContact A_WebService#WS_SupContact
int ns1__WS_USCORESupContact(
    std::string                         id_USCOREcontact,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCORESupOffre                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCORESupOffre" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_SupOffre"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCORESupOffre(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         id_USCOREoffre,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCORESupOffre(
    struct soap *soap,
    // request parameters:
    std::string                         id_USCOREoffre,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCORESupOffre rpc
//gsoap ns1  service method-encoding:	WS_USCORESupOffre http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCORESupOffre A_WebService#WS_SupOffre
int ns1__WS_USCORESupOffre(
    std::string                         id_USCOREoffre,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCORENouveauCommercial                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCORENouveauCommercial" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_NouveauCommercial"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCORENouveauCommercial(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         id_USCOREcommercial,
    std::string                         nom,
    std::string                         prenom,
    std::string                         tel,
    std::string                         fax,
    std::string                         portable,
    std::string                         email,
    std::string                         code_USCOREcommercial,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCORENouveauCommercial(
    struct soap *soap,
    // request parameters:
    std::string                         id_USCOREcommercial,
    std::string                         nom,
    std::string                         prenom,
    std::string                         tel,
    std::string                         fax,
    std::string                         portable,
    std::string                         email,
    std::string                         code_USCOREcommercial,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCORENouveauCommercial rpc
//gsoap ns1  service method-encoding:	WS_USCORENouveauCommercial http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCORENouveauCommercial A_WebService#WS_NouveauCommercial
int ns1__WS_USCORENouveauCommercial(
    std::string                         id_USCOREcommercial,	///< Request parameter
    std::string                         nom,	///< Request parameter
    std::string                         prenom,	///< Request parameter
    std::string                         tel,	///< Request parameter
    std::string                         fax,	///< Request parameter
    std::string                         portable,	///< Request parameter
    std::string                         email,	///< Request parameter
    std::string                         code_USCOREcommercial,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCORESupCommercial                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCORESupCommercial" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_SupCommercial"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCORESupCommercial(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         id_USCOREcommercial,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCORESupCommercial(
    struct soap *soap,
    // request parameters:
    std::string                         id_USCOREcommercial,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCORESupCommercial rpc
//gsoap ns1  service method-encoding:	WS_USCORESupCommercial http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCORESupCommercial A_WebService#WS_SupCommercial
int ns1__WS_USCORESupCommercial(
    std::string                         id_USCOREcommercial,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREGetPathMEPFilePDF                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCOREGetPathMEPFilePDF" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_GetPathMEPFilePDF"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREGetPathMEPFilePDF(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         PubID,
    std::string                         MachineType,
    std::string                         ClientType,
    // response parameters:
    std::string                        &Fullpath
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREGetPathMEPFilePDF(
    struct soap *soap,
    // request parameters:
    std::string                         PubID,
    std::string                         MachineType,
    std::string                         ClientType,
    // response parameters:
    std::string                        &Fullpath
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREGetPathMEPFilePDF rpc
//gsoap ns1  service method-encoding:	WS_USCOREGetPathMEPFilePDF http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREGetPathMEPFilePDF A_WebService#WS_GetPathMEPFilePDF
int ns1__WS_USCOREGetPathMEPFilePDF(
    std::string                         PubID,	///< Request parameter
    std::string                         MachineType,	///< Request parameter
    std::string                         ClientType,	///< Request parameter
    std::string                        &Fullpath	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREMAJPieceJointe                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCOREMAJPieceJointe" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_MAJPieceJointe"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREMAJPieceJointe(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         id_USCOREpub,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREMAJPieceJointe(
    struct soap *soap,
    // request parameters:
    std::string                         id_USCOREpub,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREMAJPieceJointe rpc
//gsoap ns1  service method-encoding:	WS_USCOREMAJPieceJointe http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREMAJPieceJointe A_WebService#WS_MAJPieceJointe
int ns1__WS_USCOREMAJPieceJointe(
    std::string                         id_USCOREpub,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCORENouveauContact                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCORENouveauContact" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_NouveauContact"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCORENouveauContact(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         id_USCOREcontact,
    std::string                         nom,
    std::string                         prenom,
    std::string                         tel,
    std::string                         fax,
    std::string                         portable,
    std::string                         email,
    std::string                         id_USCOREsociete,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCORENouveauContact(
    struct soap *soap,
    // request parameters:
    std::string                         id_USCOREcontact,
    std::string                         nom,
    std::string                         prenom,
    std::string                         tel,
    std::string                         fax,
    std::string                         portable,
    std::string                         email,
    std::string                         id_USCOREsociete,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCORENouveauContact rpc
//gsoap ns1  service method-encoding:	WS_USCORENouveauContact http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCORENouveauContact A_WebService#WS_NouveauContact
int ns1__WS_USCORENouveauContact(
    std::string                         id_USCOREcontact,	///< Request parameter
    std::string                         nom,	///< Request parameter
    std::string                         prenom,	///< Request parameter
    std::string                         tel,	///< Request parameter
    std::string                         fax,	///< Request parameter
    std::string                         portable,	///< Request parameter
    std::string                         email,	///< Request parameter
    std::string                         id_USCOREsociete,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCORENouvelleSociete                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCORENouvelleSociete" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_NouvelleSociete"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCORENouvelleSociete(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         id_USCOREsociete,
    std::string                         nom_USCOREsociete,
    std::string                         adresse,
    std::string                         adresse_USCOREsuite,
    std::string                         codepostal,
    std::string                         ville,
    std::string                         pays,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCORENouvelleSociete(
    struct soap *soap,
    // request parameters:
    std::string                         id_USCOREsociete,
    std::string                         nom_USCOREsociete,
    std::string                         adresse,
    std::string                         adresse_USCOREsuite,
    std::string                         codepostal,
    std::string                         ville,
    std::string                         pays,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCORENouvelleSociete rpc
//gsoap ns1  service method-encoding:	WS_USCORENouvelleSociete http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCORENouvelleSociete A_WebService#WS_NouvelleSociete
int ns1__WS_USCORENouvelleSociete(
    std::string                         id_USCOREsociete,	///< Request parameter
    std::string                         nom_USCOREsociete,	///< Request parameter
    std::string                         adresse,	///< Request parameter
    std::string                         adresse_USCOREsuite,	///< Request parameter
    std::string                         codepostal,	///< Request parameter
    std::string                         ville,	///< Request parameter
    std::string                         pays,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCORENouvelleOffre                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCORENouvelleOffre" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_NouvelleOffre"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCORENouvelleOffre(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         id_USCOREoffre,
    std::string                         nom,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCORENouvelleOffre(
    struct soap *soap,
    // request parameters:
    std::string                         id_USCOREoffre,
    std::string                         nom,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCORENouvelleOffre rpc
//gsoap ns1  service method-encoding:	WS_USCORENouvelleOffre http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCORENouvelleOffre A_WebService#WS_NouvelleOffre
int ns1__WS_USCORENouvelleOffre(
    std::string                         id_USCOREoffre,	///< Request parameter
    std::string                         nom,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCORENouvellePub                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WS_USCORENouvellePub" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_NouvellePub"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCORENouvellePub(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         id_USCOREpub,
    std::string                         date_USCOREparution,
    std::string                         titre,
    std::string                         edition,
    std::string                         largeur,
    std::string                         hauteur,
    std::string                         commentaire,
    std::string                         id_USCOREsociete,
    std::string                         code_USCOREcommercial,
    std::string                         id_USCOREoffre,
    std::string                         label,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCORENouvellePub(
    struct soap *soap,
    // request parameters:
    std::string                         id_USCOREpub,
    std::string                         date_USCOREparution,
    std::string                         titre,
    std::string                         edition,
    std::string                         largeur,
    std::string                         hauteur,
    std::string                         commentaire,
    std::string                         id_USCOREsociete,
    std::string                         code_USCOREcommercial,
    std::string                         id_USCOREoffre,
    std::string                         label,
    // response parameters:
    std::string                        &Reponse
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCORENouvellePub rpc
//gsoap ns1  service method-encoding:	WS_USCORENouvellePub http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCORENouvellePub A_WebService#WS_NouvellePub
int ns1__WS_USCORENouvellePub(
    std::string                         id_USCOREpub,	///< Request parameter
    std::string                         date_USCOREparution,	///< Request parameter
    std::string                         titre,	///< Request parameter
    std::string                         edition,	///< Request parameter
    std::string                         largeur,	///< Request parameter
    std::string                         hauteur,	///< Request parameter
    std::string                         commentaire,	///< Request parameter
    std::string                         id_USCOREsociete,	///< Request parameter
    std::string                         code_USCOREcommercial,	///< Request parameter
    std::string                         id_USCOREoffre,	///< Request parameter
    std::string                         label,	///< Request parameter
    std::string                        &Reponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREListeDateAvant                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__WS_USCOREListeDateAvantResponse" of service binding "A_USCOREWebServiceBinding" operation "ns1__WS_USCOREListeDateAvant"
struct ns1__WS_USCOREListeDateAvantResponse
{
    ArrayOfdate*                        DateParution;
    ArrayOfstring*                      StrDateParution;
    int                                 Index;
};

/// Operation "ns1__WS_USCOREListeDateAvant" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_ListeDateAvant"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREListeDateAvant(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns1__WS_USCOREListeDateAvantResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREListeDateAvant(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns1__WS_USCOREListeDateAvantResponse&
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREListeDateAvant rpc
//gsoap ns1  service method-encoding:	WS_USCOREListeDateAvant http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREListeDateAvant A_WebService#WS_ListeDateAvant
int ns1__WS_USCOREListeDateAvant(
    struct ns1__WS_USCOREListeDateAvantResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__WS_USCOREListeDateApres                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__WS_USCOREListeDateApresResponse" of service binding "A_USCOREWebServiceBinding" operation "ns1__WS_USCOREListeDateApres"
struct ns1__WS_USCOREListeDateApresResponse
{
    ArrayOfdate*                        DateParution;
    ArrayOfstring*                      StrDateParution;
    int                                 Index;
};

/// Operation "ns1__WS_USCOREListeDateApres" of service binding "A_USCOREWebServiceBinding"

/**

Operation details:

no documentation is available
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="A_WebService#WS_ListeDateApres"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WS_USCOREListeDateApres(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns1__WS_USCOREListeDateApresResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WS_USCOREListeDateApres(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns1__WS_USCOREListeDateApresResponse&
  );
@endcode

C++ proxy class (defined in soapA_USCOREWebServiceBindingProxy.h):
  class A_USCOREWebServiceBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	WS_USCOREListeDateApres rpc
//gsoap ns1  service method-encoding:	WS_USCOREListeDateApres http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WS_USCOREListeDateApres A_WebService#WS_ListeDateApres
int ns1__WS_USCOREListeDateApres(
    struct ns1__WS_USCOREListeDateApresResponse&	///< Response struct parameter
);

/* End of WS_XPub.h */
